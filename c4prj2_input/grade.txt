Grading at Tue Mar  9 10:36:20 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1921== Memcheck, a memory error detector
==1921== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1921== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1921== Command: ./tester hands.txt draw.txt
==1921== Parent PID: 1920
==1921== 
==1921== Invalid read of size 8
==1921==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1921==    by 0x4019BE: main (test-input.c:81)
==1921==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1921== 
==1921== 
==1921== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1921==  Access not within mapped region at address 0x8
==1921==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1921==    by 0x4019BE: main (test-input.c:81)
==1921==  If you believe this happened as a result of a stack
==1921==  overflow in your program's main thread (unlikely but
==1921==  possible), you can try to increase the size of the
==1921==  main thread stack using the --main-stacksize= flag.
==1921==  The main thread stack size used in this run was 8388608.
==1921== 
==1921== HEAP SUMMARY:
==1921==     in use at exit: 328 bytes in 14 blocks
==1921==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==1921== 
==1921== LEAK SUMMARY:
==1921==    definitely lost: 56 bytes in 1 blocks
==1921==    indirectly lost: 56 bytes in 7 blocks
==1921==      possibly lost: 168 bytes in 1 blocks
==1921==    still reachable: 48 bytes in 5 blocks
==1921==         suppressed: 0 bytes in 0 blocks
==1921== Rerun with --leak-check=full to see details of leaked memory
==1921== 
==1921== For counts of detected and suppressed errors, rerun with: -v
==1921== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1926== Memcheck, a memory error detector
==1926== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1926== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1926== Command: ./tester hands.txt draw.txt
==1926== Parent PID: 1925
==1926== 
==1926== Invalid read of size 8
==1926==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1926==    by 0x4019BE: main (test-input.c:81)
==1926==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1926== 
==1926== 
==1926== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1926==  Access not within mapped region at address 0x8
==1926==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1926==    by 0x4019BE: main (test-input.c:81)
==1926==  If you believe this happened as a result of a stack
==1926==  overflow in your program's main thread (unlikely but
==1926==  possible), you can try to increase the size of the
==1926==  main thread stack using the --main-stacksize= flag.
==1926==  The main thread stack size used in this run was 8388608.
==1926== 
==1926== HEAP SUMMARY:
==1926==     in use at exit: 1,192 bytes in 41 blocks
==1926==   total heap usage: 79 allocs, 38 frees, 15,608 bytes allocated
==1926== 
==1926== LEAK SUMMARY:
==1926==    definitely lost: 728 bytes in 7 blocks
==1926==    indirectly lost: 224 bytes in 28 blocks
==1926==      possibly lost: 168 bytes in 1 blocks
==1926==    still reachable: 72 bytes in 5 blocks
==1926==         suppressed: 0 bytes in 0 blocks
==1926== Rerun with --leak-check=full to see details of leaked memory
==1926== 
==1926== For counts of detected and suppressed errors, rerun with: -v
==1926== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1932== Memcheck, a memory error detector
==1932== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1932== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1932== Command: ./tester h.txt d.txt
==1932== Parent PID: 1931
==1932== 
==1932== Invalid read of size 8
==1932==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1932==    by 0x4019BE: main (test-input.c:81)
==1932==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1932== 
==1932== 
==1932== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1932==  Access not within mapped region at address 0x8
==1932==    at 0x400E03: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1932==    by 0x4019BE: main (test-input.c:81)
==1932==  If you believe this happened as a result of a stack
==1932==  overflow in your program's main thread (unlikely but
==1932==  possible), you can try to increase the size of the
==1932==  main thread stack using the --main-stacksize= flag.
==1932==  The main thread stack size used in this run was 8388608.
==1932== 
==1932== HEAP SUMMARY:
==1932==     in use at exit: 1,504 bytes in 62 blocks
==1932==   total heap usage: 115 allocs, 53 frees, 16,160 bytes allocated
==1932== 
==1932== LEAK SUMMARY:
==1932==    definitely lost: 728 bytes in 7 blocks
==1932==    indirectly lost: 224 bytes in 28 blocks
==1932==      possibly lost: 168 bytes in 1 blocks
==1932==    still reachable: 384 bytes in 26 blocks
==1932==         suppressed: 0 bytes in 0 blocks
==1932== Rerun with --leak-check=full to see details of leaked memory
==1932== 
==1932== For counts of detected and suppressed errors, rerun with: -v
==1932== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1938== Memcheck, a memory error detector
==1938== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1938== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1938== Command: ./tester i1 i2
==1938== Parent PID: 1937
==1938== 
==1938== Use of uninitialised value of size 8
==1938==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x4018E4: main (test-input.c:69)
==1938== 
==1938== Invalid write of size 8
==1938==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x4018E4: main (test-input.c:69)
==1938==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1938== 
==1938== 
==1938== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1938==  Access not within mapped region at address 0x0
==1938==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==1938==    by 0x4018E4: main (test-input.c:69)
==1938==  If you believe this happened as a result of a stack
==1938==  overflow in your program's main thread (unlikely but
==1938==  possible), you can try to increase the size of the
==1938==  main thread stack using the --main-stacksize= flag.
==1938==  The main thread stack size used in this run was 8388608.
==1938== 
==1938== HEAP SUMMARY:
==1938==     in use at exit: 2,160 bytes in 45 blocks
==1938==   total heap usage: 79 allocs, 34 frees, 7,128 bytes allocated
==1938== 
==1938== LEAK SUMMARY:
==1938==    definitely lost: 936 bytes in 8 blocks
==1938==    indirectly lost: 232 bytes in 29 blocks
==1938==      possibly lost: 0 bytes in 0 blocks
==1938==    still reachable: 992 bytes in 8 blocks
==1938==         suppressed: 0 bytes in 0 blocks
==1938== Rerun with --leak-check=full to see details of leaked memory
==1938== 
==1938== For counts of detected and suppressed errors, rerun with: -v
==1938== Use --track-origins=yes to see where uninitialised values come from
==1938== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
