Grading at Wed Mar 10 19:59:18 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==832== Memcheck, a memory error detector
==832== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==832== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==832== Command: ./tester hands.txt draw.txt
==832== Parent PID: 831
==832== 
==832== Invalid read of size 8
==832==    at 0x400F47: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==832==    by 0x401B7F: main (test-input.c:81)
==832==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==832== 
==832== 
==832== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==832==  Access not within mapped region at address 0x8
==832==    at 0x400F47: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==832==    by 0x401B7F: main (test-input.c:81)
==832==  If you believe this happened as a result of a stack
==832==  overflow in your program's main thread (unlikely but
==832==  possible), you can try to increase the size of the
==832==  main thread stack using the --main-stacksize= flag.
==832==  The main thread stack size used in this run was 8388608.
==832== 
==832== HEAP SUMMARY:
==832==     in use at exit: 176 bytes in 14 blocks
==832==   total heap usage: 28 allocs, 14 frees, 13,984 bytes allocated
==832== 
==832== LEAK SUMMARY:
==832==    definitely lost: 0 bytes in 0 blocks
==832==    indirectly lost: 0 bytes in 0 blocks
==832==      possibly lost: 0 bytes in 0 blocks
==832==    still reachable: 176 bytes in 14 blocks
==832==         suppressed: 0 bytes in 0 blocks
==832== Rerun with --leak-check=full to see details of leaked memory
==832== 
==832== For counts of detected and suppressed errors, rerun with: -v
==832== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==850== Memcheck, a memory error detector
==850== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==850== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==850== Command: ./tester h.txt d.txt
==850== Parent PID: 849
==850== 
==850== Invalid read of size 8
==850==    at 0x400E29: add_future_card (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x400D41: read_input (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x401AA5: main (test-input.c:69)
==850==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==850== 
==850== 
==850== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==850==  Access not within mapped region at address 0x8
==850==    at 0x400E29: add_future_card (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x400D41: read_input (in /graderhome/work/c4prj2_input/tester)
==850==    by 0x401AA5: main (test-input.c:69)
==850==  If you believe this happened as a result of a stack
==850==  overflow in your program's main thread (unlikely but
==850==  possible), you can try to increase the size of the
==850==  main thread stack using the --main-stacksize= flag.
==850==  The main thread stack size used in this run was 8388608.
==850== 
==850== HEAP SUMMARY:
==850==     in use at exit: 808 bytes in 12 blocks
==850==   total heap usage: 20 allocs, 8 frees, 5,080 bytes allocated
==850== 
==850== LEAK SUMMARY:
==850==    definitely lost: 0 bytes in 0 blocks
==850==    indirectly lost: 0 bytes in 0 blocks
==850==      possibly lost: 0 bytes in 0 blocks
==850==    still reachable: 808 bytes in 12 blocks
==850==         suppressed: 0 bytes in 0 blocks
==850== Rerun with --leak-check=full to see details of leaked memory
==850== 
==850== For counts of detected and suppressed errors, rerun with: -v
==850== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==856== Memcheck, a memory error detector
==856== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==856== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==856== Command: ./tester i1 i2
==856== Parent PID: 855
==856== 
==856== Invalid read of size 8
==856==    at 0x400E29: add_future_card (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x400D41: read_input (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x401AA5: main (test-input.c:69)
==856==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==856== 
==856== 
==856== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==856==  Access not within mapped region at address 0x8
==856==    at 0x400E29: add_future_card (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x400D41: read_input (in /graderhome/work/c4prj2_input/tester)
==856==    by 0x401AA5: main (test-input.c:69)
==856==  If you believe this happened as a result of a stack
==856==  overflow in your program's main thread (unlikely but
==856==  possible), you can try to increase the size of the
==856==  main thread stack using the --main-stacksize= flag.
==856==  The main thread stack size used in this run was 8388608.
==856== 
==856== HEAP SUMMARY:
==856==     in use at exit: 760 bytes in 9 blocks
==856==   total heap usage: 14 allocs, 5 frees, 4,912 bytes allocated
==856== 
==856== LEAK SUMMARY:
==856==    definitely lost: 0 bytes in 0 blocks
==856==    indirectly lost: 0 bytes in 0 blocks
==856==      possibly lost: 0 bytes in 0 blocks
==856==    still reachable: 760 bytes in 9 blocks
==856==         suppressed: 0 bytes in 0 blocks
==856== Rerun with --leak-check=full to see details of leaked memory
==856== 
==856== For counts of detected and suppressed errors, rerun with: -v
==856== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
