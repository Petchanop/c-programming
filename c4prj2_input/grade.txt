Grading at Wed Mar 10 20:01:39 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1004== Memcheck, a memory error detector
==1004== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1004== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1004== Command: ./tester hands.txt draw.txt
==1004== Parent PID: 1003
==1004== 
==1004== Invalid read of size 8
==1004==    at 0x400F49: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1004==    by 0x401B81: main (test-input.c:81)
==1004==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1004== 
==1004== 
==1004== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1004==  Access not within mapped region at address 0x8
==1004==    at 0x400F49: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1004==    by 0x401B81: main (test-input.c:81)
==1004==  If you believe this happened as a result of a stack
==1004==  overflow in your program's main thread (unlikely but
==1004==  possible), you can try to increase the size of the
==1004==  main thread stack using the --main-stacksize= flag.
==1004==  The main thread stack size used in this run was 8388608.
==1004== 
==1004== HEAP SUMMARY:
==1004==     in use at exit: 176 bytes in 14 blocks
==1004==   total heap usage: 28 allocs, 14 frees, 13,984 bytes allocated
==1004== 
==1004== LEAK SUMMARY:
==1004==    definitely lost: 0 bytes in 0 blocks
==1004==    indirectly lost: 0 bytes in 0 blocks
==1004==      possibly lost: 0 bytes in 0 blocks
==1004==    still reachable: 176 bytes in 14 blocks
==1004==         suppressed: 0 bytes in 0 blocks
==1004== Rerun with --leak-check=full to see details of leaked memory
==1004== 
==1004== For counts of detected and suppressed errors, rerun with: -v
==1004== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Line_2_did_not_match
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1022== Memcheck, a memory error detector
==1022== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1022== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1022== Command: ./tester h.txt d.txt
==1022== Parent PID: 1021
==1022== 
==1022== Invalid read of size 8
==1022==    at 0x400E2B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x400D5B: read_input (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x401AA7: main (test-input.c:69)
==1022==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1022== 
==1022== 
==1022== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1022==  Access not within mapped region at address 0x8
==1022==    at 0x400E2B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x400D5B: read_input (in /graderhome/work/c4prj2_input/tester)
==1022==    by 0x401AA7: main (test-input.c:69)
==1022==  If you believe this happened as a result of a stack
==1022==  overflow in your program's main thread (unlikely but
==1022==  possible), you can try to increase the size of the
==1022==  main thread stack using the --main-stacksize= flag.
==1022==  The main thread stack size used in this run was 8388608.
==1022== 
==1022== HEAP SUMMARY:
==1022==     in use at exit: 808 bytes in 12 blocks
==1022==   total heap usage: 20 allocs, 8 frees, 5,080 bytes allocated
==1022== 
==1022== LEAK SUMMARY:
==1022==    definitely lost: 0 bytes in 0 blocks
==1022==    indirectly lost: 0 bytes in 0 blocks
==1022==      possibly lost: 0 bytes in 0 blocks
==1022==    still reachable: 808 bytes in 12 blocks
==1022==         suppressed: 0 bytes in 0 blocks
==1022== Rerun with --leak-check=full to see details of leaked memory
==1022== 
==1022== For counts of detected and suppressed errors, rerun with: -v
==1022== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1028== Memcheck, a memory error detector
==1028== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1028== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1028== Command: ./tester i1 i2
==1028== Parent PID: 1027
==1028== 
==1028== Invalid read of size 8
==1028==    at 0x400E2B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x400D5B: read_input (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x401AA7: main (test-input.c:69)
==1028==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1028== 
==1028== 
==1028== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1028==  Access not within mapped region at address 0x8
==1028==    at 0x400E2B: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x400C40: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x400D5B: read_input (in /graderhome/work/c4prj2_input/tester)
==1028==    by 0x401AA7: main (test-input.c:69)
==1028==  If you believe this happened as a result of a stack
==1028==  overflow in your program's main thread (unlikely but
==1028==  possible), you can try to increase the size of the
==1028==  main thread stack using the --main-stacksize= flag.
==1028==  The main thread stack size used in this run was 8388608.
==1028== 
==1028== HEAP SUMMARY:
==1028==     in use at exit: 760 bytes in 9 blocks
==1028==   total heap usage: 14 allocs, 5 frees, 4,912 bytes allocated
==1028== 
==1028== LEAK SUMMARY:
==1028==    definitely lost: 0 bytes in 0 blocks
==1028==    indirectly lost: 0 bytes in 0 blocks
==1028==      possibly lost: 0 bytes in 0 blocks
==1028==    still reachable: 760 bytes in 9 blocks
==1028==         suppressed: 0 bytes in 0 blocks
==1028== Rerun with --leak-check=full to see details of leaked memory
==1028== 
==1028== For counts of detected and suppressed errors, rerun with: -v
==1028== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
