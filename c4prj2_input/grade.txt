Grading at Wed Mar 10 10:02:51 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1791== Memcheck, a memory error detector
==1791== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1791== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1791== Command: ./tester hands.txt draw.txt
==1791== Parent PID: 1790
==1791== 
==1791== Invalid read of size 8
==1791==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1791==    by 0x401C35: main (test-input.c:81)
==1791==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1791== 
==1791== 
==1791== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1791==  Access not within mapped region at address 0x8
==1791==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1791==    by 0x401C35: main (test-input.c:81)
==1791==  If you believe this happened as a result of a stack
==1791==  overflow in your program's main thread (unlikely but
==1791==  possible), you can try to increase the size of the
==1791==  main thread stack using the --main-stacksize= flag.
==1791==  The main thread stack size used in this run was 8388608.
==1791== 
==1791== HEAP SUMMARY:
==1791==     in use at exit: 328 bytes in 14 blocks
==1791==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==1791== 
==1791== LEAK SUMMARY:
==1791==    definitely lost: 56 bytes in 1 blocks
==1791==    indirectly lost: 56 bytes in 7 blocks
==1791==      possibly lost: 168 bytes in 1 blocks
==1791==    still reachable: 48 bytes in 5 blocks
==1791==         suppressed: 0 bytes in 0 blocks
==1791== Rerun with --leak-check=full to see details of leaked memory
==1791== 
==1791== For counts of detected and suppressed errors, rerun with: -v
==1791== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1796== Memcheck, a memory error detector
==1796== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1796== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1796== Command: ./tester hands.txt draw.txt
==1796== Parent PID: 1795
==1796== 
==1796== Invalid read of size 8
==1796==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1796==    by 0x401C35: main (test-input.c:81)
==1796==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1796== 
==1796== 
==1796== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1796==  Access not within mapped region at address 0x8
==1796==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1796==    by 0x401C35: main (test-input.c:81)
==1796==  If you believe this happened as a result of a stack
==1796==  overflow in your program's main thread (unlikely but
==1796==  possible), you can try to increase the size of the
==1796==  main thread stack using the --main-stacksize= flag.
==1796==  The main thread stack size used in this run was 8388608.
==1796== 
==1796== HEAP SUMMARY:
==1796==     in use at exit: 1,168 bytes in 41 blocks
==1796==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==1796== 
==1796== LEAK SUMMARY:
==1796==    definitely lost: 728 bytes in 7 blocks
==1796==    indirectly lost: 224 bytes in 28 blocks
==1796==      possibly lost: 168 bytes in 1 blocks
==1796==    still reachable: 48 bytes in 5 blocks
==1796==         suppressed: 0 bytes in 0 blocks
==1796== Rerun with --leak-check=full to see details of leaked memory
==1796== 
==1796== For counts of detected and suppressed errors, rerun with: -v
==1796== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1802== Memcheck, a memory error detector
==1802== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1802== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1802== Command: ./tester h.txt d.txt
==1802== Parent PID: 1801
==1802== 
==1802== Invalid read of size 8
==1802==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1802==    by 0x401C35: main (test-input.c:81)
==1802==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1802== 
==1802== 
==1802== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1802==  Access not within mapped region at address 0x8
==1802==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1802==    by 0x401C35: main (test-input.c:81)
==1802==  If you believe this happened as a result of a stack
==1802==  overflow in your program's main thread (unlikely but
==1802==  possible), you can try to increase the size of the
==1802==  main thread stack using the --main-stacksize= flag.
==1802==  The main thread stack size used in this run was 8388608.
==1802== 
==1802== HEAP SUMMARY:
==1802==     in use at exit: 1,480 bytes in 62 blocks
==1802==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==1802== 
==1802== LEAK SUMMARY:
==1802==    definitely lost: 728 bytes in 7 blocks
==1802==    indirectly lost: 224 bytes in 28 blocks
==1802==      possibly lost: 168 bytes in 1 blocks
==1802==    still reachable: 360 bytes in 26 blocks
==1802==         suppressed: 0 bytes in 0 blocks
==1802== Rerun with --leak-check=full to see details of leaked memory
==1802== 
==1802== For counts of detected and suppressed errors, rerun with: -v
==1802== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1808== Memcheck, a memory error detector
==1808== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1808== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1808== Command: ./tester i1 i2
==1808== Parent PID: 1807
==1808== 
==1808== Invalid read of size 8
==1808==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x401B5B: main (test-input.c:69)
==1808==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==1808== 
==1808== 
==1808== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1808==  Access not within mapped region at address 0x18
==1808==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1808==    by 0x401B5B: main (test-input.c:69)
==1808==  If you believe this happened as a result of a stack
==1808==  overflow in your program's main thread (unlikely but
==1808==  possible), you can try to increase the size of the
==1808==  main thread stack using the --main-stacksize= flag.
==1808==  The main thread stack size used in this run was 8388608.
==1808== 
==1808== HEAP SUMMARY:
==1808==     in use at exit: 2,048 bytes in 44 blocks
==1808==   total heap usage: 78 allocs, 34 frees, 6,968 bytes allocated
==1808== 
==1808== LEAK SUMMARY:
==1808==    definitely lost: 936 bytes in 8 blocks
==1808==    indirectly lost: 232 bytes in 29 blocks
==1808==      possibly lost: 0 bytes in 0 blocks
==1808==    still reachable: 880 bytes in 7 blocks
==1808==         suppressed: 0 bytes in 0 blocks
==1808== Rerun with --leak-check=full to see details of leaked memory
==1808== 
==1808== For counts of detected and suppressed errors, rerun with: -v
==1808== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
