Grading at Tue Mar  9 12:15:43 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==4181== Memcheck, a memory error detector
==4181== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4181== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4181== Command: ./tester hands.txt draw.txt
==4181== Parent PID: 4180
==4181== 
==4181== Invalid read of size 8
==4181==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4181==    by 0x401A55: main (test-input.c:81)
==4181==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4181== 
==4181== 
==4181== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4181==  Access not within mapped region at address 0x0
==4181==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4181==    by 0x401A55: main (test-input.c:81)
==4181==  If you believe this happened as a result of a stack
==4181==  overflow in your program's main thread (unlikely but
==4181==  possible), you can try to increase the size of the
==4181==  main thread stack using the --main-stacksize= flag.
==4181==  The main thread stack size used in this run was 8388608.
==4181== 
==4181== HEAP SUMMARY:
==4181==     in use at exit: 328 bytes in 14 blocks
==4181==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==4181== 
==4181== LEAK SUMMARY:
==4181==    definitely lost: 56 bytes in 1 blocks
==4181==    indirectly lost: 56 bytes in 7 blocks
==4181==      possibly lost: 168 bytes in 1 blocks
==4181==    still reachable: 48 bytes in 5 blocks
==4181==         suppressed: 0 bytes in 0 blocks
==4181== Rerun with --leak-check=full to see details of leaked memory
==4181== 
==4181== For counts of detected and suppressed errors, rerun with: -v
==4181== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==4186== Memcheck, a memory error detector
==4186== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4186== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4186== Command: ./tester hands.txt draw.txt
==4186== Parent PID: 4185
==4186== 
==4186== Invalid read of size 8
==4186==    at 0x401B33: main (test-input.c:94)
==4186==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4186== 
==4186== 
==4186== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4186==  Access not within mapped region at address 0x0
==4186==    at 0x401B33: main (test-input.c:94)
==4186==  If you believe this happened as a result of a stack
==4186==  overflow in your program's main thread (unlikely but
==4186==  possible), you can try to increase the size of the
==4186==  main thread stack using the --main-stacksize= flag.
==4186==  The main thread stack size used in this run was 8388608.
==4186== 
==4186== HEAP SUMMARY:
==4186==     in use at exit: 1,168 bytes in 41 blocks
==4186==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==4186== 
==4186== LEAK SUMMARY:
==4186==    definitely lost: 728 bytes in 7 blocks
==4186==    indirectly lost: 224 bytes in 28 blocks
==4186==      possibly lost: 168 bytes in 1 blocks
==4186==    still reachable: 48 bytes in 5 blocks
==4186==         suppressed: 0 bytes in 0 blocks
==4186== Rerun with --leak-check=full to see details of leaked memory
==4186== 
==4186== For counts of detected and suppressed errors, rerun with: -v
==4186== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4192== Memcheck, a memory error detector
==4192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4192== Command: ./tester h.txt d.txt
==4192== Parent PID: 4191
==4192== 
==4192== Invalid read of size 8
==4192==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4192==    by 0x401A55: main (test-input.c:81)
==4192==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4192== 
==4192== 
==4192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4192==  Access not within mapped region at address 0x0
==4192==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4192==    by 0x401A55: main (test-input.c:81)
==4192==  If you believe this happened as a result of a stack
==4192==  overflow in your program's main thread (unlikely but
==4192==  possible), you can try to increase the size of the
==4192==  main thread stack using the --main-stacksize= flag.
==4192==  The main thread stack size used in this run was 8388608.
==4192== 
==4192== HEAP SUMMARY:
==4192==     in use at exit: 1,480 bytes in 62 blocks
==4192==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==4192== 
==4192== LEAK SUMMARY:
==4192==    definitely lost: 728 bytes in 7 blocks
==4192==    indirectly lost: 224 bytes in 28 blocks
==4192==      possibly lost: 168 bytes in 1 blocks
==4192==    still reachable: 360 bytes in 26 blocks
==4192==         suppressed: 0 bytes in 0 blocks
==4192== Rerun with --leak-check=full to see details of leaked memory
==4192== 
==4192== For counts of detected and suppressed errors, rerun with: -v
==4192== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4198== Memcheck, a memory error detector
==4198== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4198== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4198== Command: ./tester i1 i2
==4198== Parent PID: 4197
==4198== 
==4198== Use of uninitialised value of size 8
==4198==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x40197B: main (test-input.c:69)
==4198== 
==4198== Invalid write of size 8
==4198==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x40197B: main (test-input.c:69)
==4198==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4198== 
==4198== 
==4198== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4198==  Access not within mapped region at address 0x0
==4198==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4198==    by 0x40197B: main (test-input.c:69)
==4198==  If you believe this happened as a result of a stack
==4198==  overflow in your program's main thread (unlikely but
==4198==  possible), you can try to increase the size of the
==4198==  main thread stack using the --main-stacksize= flag.
==4198==  The main thread stack size used in this run was 8388608.
==4198== 
==4198== HEAP SUMMARY:
==4198==     in use at exit: 2,128 bytes in 45 blocks
==4198==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==4198== 
==4198== LEAK SUMMARY:
==4198==    definitely lost: 936 bytes in 8 blocks
==4198==    indirectly lost: 232 bytes in 29 blocks
==4198==      possibly lost: 0 bytes in 0 blocks
==4198==    still reachable: 960 bytes in 8 blocks
==4198==         suppressed: 0 bytes in 0 blocks
==4198== Rerun with --leak-check=full to see details of leaked memory
==4198== 
==4198== For counts of detected and suppressed errors, rerun with: -v
==4198== Use --track-origins=yes to see where uninitialised values come from
==4198== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
