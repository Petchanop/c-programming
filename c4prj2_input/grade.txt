Grading at Wed Mar 10 09:46:01 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1008== Memcheck, a memory error detector
==1008== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1008== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1008== Command: ./tester hands.txt draw.txt
==1008== Parent PID: 1007
==1008== 
==1008== Invalid read of size 8
==1008==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x401C71: main (test-input.c:81)
==1008==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1008== 
==1008== 
==1008== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1008==  Access not within mapped region at address 0x0
==1008==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x401C71: main (test-input.c:81)
==1008==  If you believe this happened as a result of a stack
==1008==  overflow in your program's main thread (unlikely but
==1008==  possible), you can try to increase the size of the
==1008==  main thread stack using the --main-stacksize= flag.
==1008==  The main thread stack size used in this run was 8388608.
==1008== 
==1008== HEAP SUMMARY:
==1008==     in use at exit: 328 bytes in 14 blocks
==1008==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==1008== 
==1008== LEAK SUMMARY:
==1008==    definitely lost: 56 bytes in 1 blocks
==1008==    indirectly lost: 56 bytes in 7 blocks
==1008==      possibly lost: 168 bytes in 1 blocks
==1008==    still reachable: 48 bytes in 5 blocks
==1008==         suppressed: 0 bytes in 0 blocks
==1008== Rerun with --leak-check=full to see details of leaked memory
==1008== 
==1008== For counts of detected and suppressed errors, rerun with: -v
==1008== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1013== Memcheck, a memory error detector
==1013== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1013== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1013== Command: ./tester hands.txt draw.txt
==1013== Parent PID: 1012
==1013== 
==1013== Invalid read of size 8
==1013==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1013==    by 0x401C71: main (test-input.c:81)
==1013==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1013== 
==1013== 
==1013== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1013==  Access not within mapped region at address 0x0
==1013==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1013==    by 0x401C71: main (test-input.c:81)
==1013==  If you believe this happened as a result of a stack
==1013==  overflow in your program's main thread (unlikely but
==1013==  possible), you can try to increase the size of the
==1013==  main thread stack using the --main-stacksize= flag.
==1013==  The main thread stack size used in this run was 8388608.
==1013== 
==1013== HEAP SUMMARY:
==1013==     in use at exit: 1,168 bytes in 41 blocks
==1013==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==1013== 
==1013== LEAK SUMMARY:
==1013==    definitely lost: 728 bytes in 7 blocks
==1013==    indirectly lost: 224 bytes in 28 blocks
==1013==      possibly lost: 168 bytes in 1 blocks
==1013==    still reachable: 48 bytes in 5 blocks
==1013==         suppressed: 0 bytes in 0 blocks
==1013== Rerun with --leak-check=full to see details of leaked memory
==1013== 
==1013== For counts of detected and suppressed errors, rerun with: -v
==1013== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1019== Memcheck, a memory error detector
==1019== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1019== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1019== Command: ./tester h.txt d.txt
==1019== Parent PID: 1018
==1019== 
==1019== Invalid read of size 8
==1019==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1019==    by 0x401C71: main (test-input.c:81)
==1019==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1019== 
==1019== 
==1019== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1019==  Access not within mapped region at address 0x0
==1019==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1019==    by 0x401C71: main (test-input.c:81)
==1019==  If you believe this happened as a result of a stack
==1019==  overflow in your program's main thread (unlikely but
==1019==  possible), you can try to increase the size of the
==1019==  main thread stack using the --main-stacksize= flag.
==1019==  The main thread stack size used in this run was 8388608.
==1019== 
==1019== HEAP SUMMARY:
==1019==     in use at exit: 1,480 bytes in 62 blocks
==1019==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==1019== 
==1019== LEAK SUMMARY:
==1019==    definitely lost: 728 bytes in 7 blocks
==1019==    indirectly lost: 224 bytes in 28 blocks
==1019==      possibly lost: 168 bytes in 1 blocks
==1019==    still reachable: 360 bytes in 26 blocks
==1019==         suppressed: 0 bytes in 0 blocks
==1019== Rerun with --leak-check=full to see details of leaked memory
==1019== 
==1019== For counts of detected and suppressed errors, rerun with: -v
==1019== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1025== Memcheck, a memory error detector
==1025== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1025== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1025== Command: ./tester i1 i2
==1025== Parent PID: 1024
==1025== 
==1025== Invalid read of size 8
==1025==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x401B97: main (test-input.c:69)
==1025==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==1025== 
==1025== 
==1025== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1025==  Access not within mapped region at address 0x18
==1025==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1025==    by 0x401B97: main (test-input.c:69)
==1025==  If you believe this happened as a result of a stack
==1025==  overflow in your program's main thread (unlikely but
==1025==  possible), you can try to increase the size of the
==1025==  main thread stack using the --main-stacksize= flag.
==1025==  The main thread stack size used in this run was 8388608.
==1025== 
==1025== HEAP SUMMARY:
==1025==     in use at exit: 2,048 bytes in 44 blocks
==1025==   total heap usage: 78 allocs, 34 frees, 6,968 bytes allocated
==1025== 
==1025== LEAK SUMMARY:
==1025==    definitely lost: 936 bytes in 8 blocks
==1025==    indirectly lost: 232 bytes in 29 blocks
==1025==      possibly lost: 0 bytes in 0 blocks
==1025==    still reachable: 880 bytes in 7 blocks
==1025==         suppressed: 0 bytes in 0 blocks
==1025== Rerun with --leak-check=full to see details of leaked memory
==1025== 
==1025== For counts of detected and suppressed errors, rerun with: -v
==1025== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
