Grading at Tue Mar  9 10:58:04 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2082== Memcheck, a memory error detector
==2082== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2082== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2082== Command: ./tester hands.txt draw.txt
==2082== Parent PID: 2081
==2082== 
==2082== Invalid read of size 8
==2082==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2082==    by 0x401A1E: main (test-input.c:81)
==2082==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2082== 
==2082== 
==2082== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2082==  Access not within mapped region at address 0x8
==2082==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2082==    by 0x401A1E: main (test-input.c:81)
==2082==  If you believe this happened as a result of a stack
==2082==  overflow in your program's main thread (unlikely but
==2082==  possible), you can try to increase the size of the
==2082==  main thread stack using the --main-stacksize= flag.
==2082==  The main thread stack size used in this run was 8388608.
==2082== 
==2082== HEAP SUMMARY:
==2082==     in use at exit: 328 bytes in 14 blocks
==2082==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==2082== 
==2082== LEAK SUMMARY:
==2082==    definitely lost: 56 bytes in 1 blocks
==2082==    indirectly lost: 56 bytes in 7 blocks
==2082==      possibly lost: 168 bytes in 1 blocks
==2082==    still reachable: 48 bytes in 5 blocks
==2082==         suppressed: 0 bytes in 0 blocks
==2082== Rerun with --leak-check=full to see details of leaked memory
==2082== 
==2082== For counts of detected and suppressed errors, rerun with: -v
==2082== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2087== Memcheck, a memory error detector
==2087== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2087== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2087== Command: ./tester hands.txt draw.txt
==2087== Parent PID: 2086
==2087== 
==2087== Invalid read of size 8
==2087==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2087==    by 0x401A1E: main (test-input.c:81)
==2087==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2087== 
==2087== 
==2087== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2087==  Access not within mapped region at address 0x8
==2087==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2087==    by 0x401A1E: main (test-input.c:81)
==2087==  If you believe this happened as a result of a stack
==2087==  overflow in your program's main thread (unlikely but
==2087==  possible), you can try to increase the size of the
==2087==  main thread stack using the --main-stacksize= flag.
==2087==  The main thread stack size used in this run was 8388608.
==2087== 
==2087== HEAP SUMMARY:
==2087==     in use at exit: 1,192 bytes in 41 blocks
==2087==   total heap usage: 79 allocs, 38 frees, 15,608 bytes allocated
==2087== 
==2087== LEAK SUMMARY:
==2087==    definitely lost: 728 bytes in 7 blocks
==2087==    indirectly lost: 224 bytes in 28 blocks
==2087==      possibly lost: 168 bytes in 1 blocks
==2087==    still reachable: 72 bytes in 5 blocks
==2087==         suppressed: 0 bytes in 0 blocks
==2087== Rerun with --leak-check=full to see details of leaked memory
==2087== 
==2087== For counts of detected and suppressed errors, rerun with: -v
==2087== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2093== Memcheck, a memory error detector
==2093== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2093== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2093== Command: ./tester h.txt d.txt
==2093== Parent PID: 2092
==2093== 
==2093== Invalid read of size 8
==2093==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2093==    by 0x401A1E: main (test-input.c:81)
==2093==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2093== 
==2093== 
==2093== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2093==  Access not within mapped region at address 0x8
==2093==    at 0x400E5B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2093==    by 0x401A1E: main (test-input.c:81)
==2093==  If you believe this happened as a result of a stack
==2093==  overflow in your program's main thread (unlikely but
==2093==  possible), you can try to increase the size of the
==2093==  main thread stack using the --main-stacksize= flag.
==2093==  The main thread stack size used in this run was 8388608.
==2093== 
==2093== HEAP SUMMARY:
==2093==     in use at exit: 1,504 bytes in 62 blocks
==2093==   total heap usage: 115 allocs, 53 frees, 16,160 bytes allocated
==2093== 
==2093== LEAK SUMMARY:
==2093==    definitely lost: 728 bytes in 7 blocks
==2093==    indirectly lost: 224 bytes in 28 blocks
==2093==      possibly lost: 168 bytes in 1 blocks
==2093==    still reachable: 384 bytes in 26 blocks
==2093==         suppressed: 0 bytes in 0 blocks
==2093== Rerun with --leak-check=full to see details of leaked memory
==2093== 
==2093== For counts of detected and suppressed errors, rerun with: -v
==2093== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2099== Memcheck, a memory error detector
==2099== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2099== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2099== Command: ./tester i1 i2
==2099== Parent PID: 2098
==2099== 
==2099== Use of uninitialised value of size 8
==2099==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x401944: main (test-input.c:69)
==2099== 
==2099== Invalid write of size 8
==2099==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x401944: main (test-input.c:69)
==2099==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2099== 
==2099== 
==2099== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2099==  Access not within mapped region at address 0x0
==2099==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2099==    by 0x401944: main (test-input.c:69)
==2099==  If you believe this happened as a result of a stack
==2099==  overflow in your program's main thread (unlikely but
==2099==  possible), you can try to increase the size of the
==2099==  main thread stack using the --main-stacksize= flag.
==2099==  The main thread stack size used in this run was 8388608.
==2099== 
==2099== HEAP SUMMARY:
==2099==     in use at exit: 2,160 bytes in 45 blocks
==2099==   total heap usage: 79 allocs, 34 frees, 7,128 bytes allocated
==2099== 
==2099== LEAK SUMMARY:
==2099==    definitely lost: 936 bytes in 8 blocks
==2099==    indirectly lost: 232 bytes in 29 blocks
==2099==      possibly lost: 0 bytes in 0 blocks
==2099==    still reachable: 992 bytes in 8 blocks
==2099==         suppressed: 0 bytes in 0 blocks
==2099== Rerun with --leak-check=full to see details of leaked memory
==2099== 
==2099== For counts of detected and suppressed errors, rerun with: -v
==2099== Use --track-origins=yes to see where uninitialised values come from
==2099== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
