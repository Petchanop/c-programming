Grading at Tue Mar  9 11:00:02 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2253== Memcheck, a memory error detector
==2253== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2253== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2253== Command: ./tester hands.txt draw.txt
==2253== Parent PID: 2252
==2253== 
==2253== Invalid read of size 8
==2253==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2253==    by 0x401A42: main (test-input.c:81)
==2253==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2253== 
==2253== 
==2253== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2253==  Access not within mapped region at address 0x8
==2253==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2253==    by 0x401A42: main (test-input.c:81)
==2253==  If you believe this happened as a result of a stack
==2253==  overflow in your program's main thread (unlikely but
==2253==  possible), you can try to increase the size of the
==2253==  main thread stack using the --main-stacksize= flag.
==2253==  The main thread stack size used in this run was 8388608.
==2253== 
==2253== HEAP SUMMARY:
==2253==     in use at exit: 328 bytes in 14 blocks
==2253==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==2253== 
==2253== LEAK SUMMARY:
==2253==    definitely lost: 56 bytes in 1 blocks
==2253==    indirectly lost: 56 bytes in 7 blocks
==2253==      possibly lost: 168 bytes in 1 blocks
==2253==    still reachable: 48 bytes in 5 blocks
==2253==         suppressed: 0 bytes in 0 blocks
==2253== Rerun with --leak-check=full to see details of leaked memory
==2253== 
==2253== For counts of detected and suppressed errors, rerun with: -v
==2253== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2258== Memcheck, a memory error detector
==2258== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2258== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2258== Command: ./tester hands.txt draw.txt
==2258== Parent PID: 2257
==2258== 
==2258== Invalid read of size 8
==2258==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2258==    by 0x401A42: main (test-input.c:81)
==2258==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2258== 
==2258== 
==2258== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2258==  Access not within mapped region at address 0x8
==2258==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2258==    by 0x401A42: main (test-input.c:81)
==2258==  If you believe this happened as a result of a stack
==2258==  overflow in your program's main thread (unlikely but
==2258==  possible), you can try to increase the size of the
==2258==  main thread stack using the --main-stacksize= flag.
==2258==  The main thread stack size used in this run was 8388608.
==2258== 
==2258== HEAP SUMMARY:
==2258==     in use at exit: 1,192 bytes in 41 blocks
==2258==   total heap usage: 79 allocs, 38 frees, 15,608 bytes allocated
==2258== 
==2258== LEAK SUMMARY:
==2258==    definitely lost: 728 bytes in 7 blocks
==2258==    indirectly lost: 224 bytes in 28 blocks
==2258==      possibly lost: 168 bytes in 1 blocks
==2258==    still reachable: 72 bytes in 5 blocks
==2258==         suppressed: 0 bytes in 0 blocks
==2258== Rerun with --leak-check=full to see details of leaked memory
==2258== 
==2258== For counts of detected and suppressed errors, rerun with: -v
==2258== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2264== Memcheck, a memory error detector
==2264== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2264== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2264== Command: ./tester h.txt d.txt
==2264== Parent PID: 2263
==2264== 
==2264== Invalid read of size 8
==2264==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2264==    by 0x401A42: main (test-input.c:81)
==2264==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2264== 
==2264== 
==2264== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2264==  Access not within mapped region at address 0x8
==2264==    at 0x400DBF: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2264==    by 0x401A42: main (test-input.c:81)
==2264==  If you believe this happened as a result of a stack
==2264==  overflow in your program's main thread (unlikely but
==2264==  possible), you can try to increase the size of the
==2264==  main thread stack using the --main-stacksize= flag.
==2264==  The main thread stack size used in this run was 8388608.
==2264== 
==2264== HEAP SUMMARY:
==2264==     in use at exit: 1,504 bytes in 62 blocks
==2264==   total heap usage: 115 allocs, 53 frees, 16,160 bytes allocated
==2264== 
==2264== LEAK SUMMARY:
==2264==    definitely lost: 728 bytes in 7 blocks
==2264==    indirectly lost: 224 bytes in 28 blocks
==2264==      possibly lost: 168 bytes in 1 blocks
==2264==    still reachable: 384 bytes in 26 blocks
==2264==         suppressed: 0 bytes in 0 blocks
==2264== Rerun with --leak-check=full to see details of leaked memory
==2264== 
==2264== For counts of detected and suppressed errors, rerun with: -v
==2264== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2270== Memcheck, a memory error detector
==2270== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2270== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2270== Command: ./tester i1 i2
==2270== Parent PID: 2269
==2270== 
==2270== Use of uninitialised value of size 8
==2270==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x401968: main (test-input.c:69)
==2270== 
==2270== Invalid write of size 8
==2270==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x401968: main (test-input.c:69)
==2270==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2270== 
==2270== 
==2270== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2270==  Access not within mapped region at address 0x0
==2270==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2270==    by 0x401968: main (test-input.c:69)
==2270==  If you believe this happened as a result of a stack
==2270==  overflow in your program's main thread (unlikely but
==2270==  possible), you can try to increase the size of the
==2270==  main thread stack using the --main-stacksize= flag.
==2270==  The main thread stack size used in this run was 8388608.
==2270== 
==2270== HEAP SUMMARY:
==2270==     in use at exit: 2,160 bytes in 45 blocks
==2270==   total heap usage: 79 allocs, 34 frees, 7,128 bytes allocated
==2270== 
==2270== LEAK SUMMARY:
==2270==    definitely lost: 936 bytes in 8 blocks
==2270==    indirectly lost: 232 bytes in 29 blocks
==2270==      possibly lost: 0 bytes in 0 blocks
==2270==    still reachable: 992 bytes in 8 blocks
==2270==         suppressed: 0 bytes in 0 blocks
==2270== Rerun with --leak-check=full to see details of leaked memory
==2270== 
==2270== For counts of detected and suppressed errors, rerun with: -v
==2270== Use --track-origins=yes to see where uninitialised values come from
==2270== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
