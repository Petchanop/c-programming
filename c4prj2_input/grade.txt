Grading at Thu Mar 11 16:10:10 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Your file did not match the expected ouput
Test case failed
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==3084== Memcheck, a memory error detector
==3084== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3084== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3084== Command: ./tester i1 i2
==3084== Parent PID: 3083
==3084== 
==3084== Invalid read of size 8
==3084==    at 0x4012BD: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Address 0x520a290 is 0 bytes after a block of size 96 alloc'd
==3084==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x40109F: add_card_to (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x4018B5: simple_hand_from_string (test-input.c:16)
==3084==    by 0x40191F: simple_read_input (test-input.c:32)
==3084==    by 0x401BAA: main (test-input.c:77)
==3084== 
==3084== Invalid free() / delete / delete[] / realloc()
==3084==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x4012C7: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Address 0xa0 is not stack'd, malloc'd or (recently) free'd
==3084== 
==3084== Invalid read of size 8
==3084==    at 0x4012D6: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Address 0x5209978 is 8 bytes inside a block of size 16 free'd
==3084==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x4012C7: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Block was alloc'd at
==3084==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x401838: simple_hand_from_string (test-input.c:10)
==3084==    by 0x40191F: simple_read_input (test-input.c:32)
==3084==    by 0x401BAA: main (test-input.c:77)
==3084== 
==3084== Invalid read of size 8
==3084==    at 0x4012AD: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Address 0x5209970 is 0 bytes inside a block of size 16 free'd
==3084==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x4012C7: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  Block was alloc'd at
==3084==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x401838: simple_hand_from_string (test-input.c:10)
==3084==    by 0x40191F: simple_read_input (test-input.c:32)
==3084==    by 0x401BAA: main (test-input.c:77)
==3084== 
==3084== Conditional jump or move depends on uninitialised value(s)
==3084==    at 0x4C2EDA1: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==3084==    by 0x4012C7: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084== 
==3084== 
==3084== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3084==  Access not within mapped region at address 0x5604000
==3084==    at 0x4012BD: free_deck (in /graderhome/work/c4prj2_input/tester)
==3084==    by 0x401D70: main (test-input.c:102)
==3084==  If you believe this happened as a result of a stack
==3084==  overflow in your program's main thread (unlikely but
==3084==  possible), you can try to increase the size of the
==3084==  main thread stack using the --main-stacksize= flag.
==3084==  The main thread stack size used in this run was 8388608.
==3084== 
==3084== HEAP SUMMARY:
==3084==     in use at exit: 144 bytes in 2 blocks
==3084==   total heap usage: 302 allocs, 1,271 frees, 21,480 bytes allocated
==3084== 
==3084== LEAK SUMMARY:
==3084==    definitely lost: 96 bytes in 1 blocks
==3084==    indirectly lost: 0 bytes in 0 blocks
==3084==      possibly lost: 0 bytes in 0 blocks
==3084==    still reachable: 48 bytes in 1 blocks
==3084==         suppressed: 0 bytes in 0 blocks
==3084== Rerun with --leak-check=full to see details of leaked memory
==3084== 
==3084== For counts of detected and suppressed errors, rerun with: -v
==3084== Use --track-origins=yes to see where uninitialised values come from
==3084== ERROR SUMMARY: 1564034 errors from 5 contexts (suppressed: 0 from 0)

Overall Grade: C
