Grading at Wed Mar 10 10:12:34 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2180== Memcheck, a memory error detector
==2180== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2180== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2180== Command: ./tester hands.txt draw.txt
==2180== Parent PID: 2179
==2180== 
==2180== Invalid read of size 8
==2180==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x401B82: main (test-input.c:69)
==2180==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2180== 
==2180== 
==2180== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2180==  Access not within mapped region at address 0x8
==2180==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2180==    by 0x401B82: main (test-input.c:69)
==2180==  If you believe this happened as a result of a stack
==2180==  overflow in your program's main thread (unlikely but
==2180==  possible), you can try to increase the size of the
==2180==  main thread stack using the --main-stacksize= flag.
==2180==  The main thread stack size used in this run was 8388608.
==2180== 
==2180== HEAP SUMMARY:
==2180==     in use at exit: 960 bytes in 12 blocks
==2180==   total heap usage: 21 allocs, 9 frees, 9,336 bytes allocated
==2180== 
==2180== LEAK SUMMARY:
==2180==    definitely lost: 56 bytes in 1 blocks
==2180==    indirectly lost: 56 bytes in 7 blocks
==2180==      possibly lost: 0 bytes in 0 blocks
==2180==    still reachable: 848 bytes in 4 blocks
==2180==         suppressed: 0 bytes in 0 blocks
==2180== Rerun with --leak-check=full to see details of leaked memory
==2180== 
==2180== For counts of detected and suppressed errors, rerun with: -v
==2180== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2185== Memcheck, a memory error detector
==2185== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2185== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2185== Command: ./tester hands.txt draw.txt
==2185== Parent PID: 2184
==2185== 
==2185== Invalid read of size 8
==2185==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x401B82: main (test-input.c:69)
==2185==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2185== 
==2185== 
==2185== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2185==  Access not within mapped region at address 0x8
==2185==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2185==    by 0x401B82: main (test-input.c:69)
==2185==  If you believe this happened as a result of a stack
==2185==  overflow in your program's main thread (unlikely but
==2185==  possible), you can try to increase the size of the
==2185==  main thread stack using the --main-stacksize= flag.
==2185==  The main thread stack size used in this run was 8388608.
==2185== 
==2185== HEAP SUMMARY:
==2185==     in use at exit: 960 bytes in 12 blocks
==2185==   total heap usage: 21 allocs, 9 frees, 9,336 bytes allocated
==2185== 
==2185== LEAK SUMMARY:
==2185==    definitely lost: 56 bytes in 1 blocks
==2185==    indirectly lost: 56 bytes in 7 blocks
==2185==      possibly lost: 0 bytes in 0 blocks
==2185==    still reachable: 848 bytes in 4 blocks
==2185==         suppressed: 0 bytes in 0 blocks
==2185== Rerun with --leak-check=full to see details of leaked memory
==2185== 
==2185== For counts of detected and suppressed errors, rerun with: -v
==2185== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2191== Memcheck, a memory error detector
==2191== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2191== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2191== Command: ./tester h.txt d.txt
==2191== Parent PID: 2190
==2191== 
==2191== Invalid read of size 8
==2191==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x401B82: main (test-input.c:69)
==2191==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2191== 
==2191== 
==2191== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2191==  Access not within mapped region at address 0x8
==2191==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2191==    by 0x401B82: main (test-input.c:69)
==2191==  If you believe this happened as a result of a stack
==2191==  overflow in your program's main thread (unlikely but
==2191==  possible), you can try to increase the size of the
==2191==  main thread stack using the --main-stacksize= flag.
==2191==  The main thread stack size used in this run was 8388608.
==2191== 
==2191== HEAP SUMMARY:
==2191==     in use at exit: 960 bytes in 12 blocks
==2191==   total heap usage: 21 allocs, 9 frees, 9,336 bytes allocated
==2191== 
==2191== LEAK SUMMARY:
==2191==    definitely lost: 56 bytes in 1 blocks
==2191==    indirectly lost: 56 bytes in 7 blocks
==2191==      possibly lost: 0 bytes in 0 blocks
==2191==    still reachable: 848 bytes in 4 blocks
==2191==         suppressed: 0 bytes in 0 blocks
==2191== Rerun with --leak-check=full to see details of leaked memory
==2191== 
==2191== For counts of detected and suppressed errors, rerun with: -v
==2191== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2197== Memcheck, a memory error detector
==2197== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2197== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2197== Command: ./tester i1 i2
==2197== Parent PID: 2196
==2197== 
==2197== Invalid read of size 8
==2197==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x401B82: main (test-input.c:69)
==2197==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2197== 
==2197== 
==2197== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2197==  Access not within mapped region at address 0x8
==2197==    at 0x40139D: print_hand (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x400C1D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x400CA4: read_input (in /graderhome/work/c4prj2_input/tester)
==2197==    by 0x401B82: main (test-input.c:69)
==2197==  If you believe this happened as a result of a stack
==2197==  overflow in your program's main thread (unlikely but
==2197==  possible), you can try to increase the size of the
==2197==  main thread stack using the --main-stacksize= flag.
==2197==  The main thread stack size used in this run was 8388608.
==2197== 
==2197== HEAP SUMMARY:
==2197==     in use at exit: 960 bytes in 12 blocks
==2197==   total heap usage: 21 allocs, 9 frees, 9,336 bytes allocated
==2197== 
==2197== LEAK SUMMARY:
==2197==    definitely lost: 56 bytes in 1 blocks
==2197==    indirectly lost: 56 bytes in 7 blocks
==2197==      possibly lost: 0 bytes in 0 blocks
==2197==    still reachable: 848 bytes in 4 blocks
==2197==         suppressed: 0 bytes in 0 blocks
==2197== Rerun with --leak-check=full to see details of leaked memory
==2197== 
==2197== For counts of detected and suppressed errors, rerun with: -v
==2197== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
