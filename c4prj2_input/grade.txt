Grading at Wed Mar 10 09:48:24 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1175== Memcheck, a memory error detector
==1175== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1175== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1175== Command: ./tester hands.txt draw.txt
==1175== Parent PID: 1174
==1175== 
==1175== Invalid read of size 8
==1175==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1175==    by 0x401C57: main (test-input.c:81)
==1175==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1175== 
==1175== 
==1175== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1175==  Access not within mapped region at address 0x0
==1175==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1175==    by 0x401C57: main (test-input.c:81)
==1175==  If you believe this happened as a result of a stack
==1175==  overflow in your program's main thread (unlikely but
==1175==  possible), you can try to increase the size of the
==1175==  main thread stack using the --main-stacksize= flag.
==1175==  The main thread stack size used in this run was 8388608.
==1175== 
==1175== HEAP SUMMARY:
==1175==     in use at exit: 328 bytes in 14 blocks
==1175==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==1175== 
==1175== LEAK SUMMARY:
==1175==    definitely lost: 56 bytes in 1 blocks
==1175==    indirectly lost: 56 bytes in 7 blocks
==1175==      possibly lost: 168 bytes in 1 blocks
==1175==    still reachable: 48 bytes in 5 blocks
==1175==         suppressed: 0 bytes in 0 blocks
==1175== Rerun with --leak-check=full to see details of leaked memory
==1175== 
==1175== For counts of detected and suppressed errors, rerun with: -v
==1175== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1180== Memcheck, a memory error detector
==1180== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1180== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1180== Command: ./tester hands.txt draw.txt
==1180== Parent PID: 1179
==1180== 
==1180== Invalid read of size 8
==1180==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1180==    by 0x401C57: main (test-input.c:81)
==1180==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1180== 
==1180== 
==1180== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1180==  Access not within mapped region at address 0x0
==1180==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1180==    by 0x401C57: main (test-input.c:81)
==1180==  If you believe this happened as a result of a stack
==1180==  overflow in your program's main thread (unlikely but
==1180==  possible), you can try to increase the size of the
==1180==  main thread stack using the --main-stacksize= flag.
==1180==  The main thread stack size used in this run was 8388608.
==1180== 
==1180== HEAP SUMMARY:
==1180==     in use at exit: 1,168 bytes in 41 blocks
==1180==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==1180== 
==1180== LEAK SUMMARY:
==1180==    definitely lost: 728 bytes in 7 blocks
==1180==    indirectly lost: 224 bytes in 28 blocks
==1180==      possibly lost: 168 bytes in 1 blocks
==1180==    still reachable: 48 bytes in 5 blocks
==1180==         suppressed: 0 bytes in 0 blocks
==1180== Rerun with --leak-check=full to see details of leaked memory
==1180== 
==1180== For counts of detected and suppressed errors, rerun with: -v
==1180== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1186== Memcheck, a memory error detector
==1186== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1186== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1186== Command: ./tester h.txt d.txt
==1186== Parent PID: 1185
==1186== 
==1186== Invalid read of size 8
==1186==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1186==    by 0x401C57: main (test-input.c:81)
==1186==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1186== 
==1186== 
==1186== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1186==  Access not within mapped region at address 0x0
==1186==    at 0x400FD8: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==1186==    by 0x401C57: main (test-input.c:81)
==1186==  If you believe this happened as a result of a stack
==1186==  overflow in your program's main thread (unlikely but
==1186==  possible), you can try to increase the size of the
==1186==  main thread stack using the --main-stacksize= flag.
==1186==  The main thread stack size used in this run was 8388608.
==1186== 
==1186== HEAP SUMMARY:
==1186==     in use at exit: 1,480 bytes in 62 blocks
==1186==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==1186== 
==1186== LEAK SUMMARY:
==1186==    definitely lost: 728 bytes in 7 blocks
==1186==    indirectly lost: 224 bytes in 28 blocks
==1186==      possibly lost: 168 bytes in 1 blocks
==1186==    still reachable: 360 bytes in 26 blocks
==1186==         suppressed: 0 bytes in 0 blocks
==1186== Rerun with --leak-check=full to see details of leaked memory
==1186== 
==1186== For counts of detected and suppressed errors, rerun with: -v
==1186== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1192== Memcheck, a memory error detector
==1192== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1192== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1192== Command: ./tester i1 i2
==1192== Parent PID: 1191
==1192== 
==1192== Invalid read of size 8
==1192==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x401B7D: main (test-input.c:69)
==1192==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==1192== 
==1192== 
==1192== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1192==  Access not within mapped region at address 0x18
==1192==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==1192==    by 0x401B7D: main (test-input.c:69)
==1192==  If you believe this happened as a result of a stack
==1192==  overflow in your program's main thread (unlikely but
==1192==  possible), you can try to increase the size of the
==1192==  main thread stack using the --main-stacksize= flag.
==1192==  The main thread stack size used in this run was 8388608.
==1192== 
==1192== HEAP SUMMARY:
==1192==     in use at exit: 2,048 bytes in 44 blocks
==1192==   total heap usage: 78 allocs, 34 frees, 6,968 bytes allocated
==1192== 
==1192== LEAK SUMMARY:
==1192==    definitely lost: 936 bytes in 8 blocks
==1192==    indirectly lost: 232 bytes in 29 blocks
==1192==      possibly lost: 0 bytes in 0 blocks
==1192==    still reachable: 880 bytes in 7 blocks
==1192==         suppressed: 0 bytes in 0 blocks
==1192== Rerun with --leak-check=full to see details of leaked memory
==1192== 
==1192== For counts of detected and suppressed errors, rerun with: -v
==1192== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
