Grading at Tue Mar  9 11:05:41 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2579== Memcheck, a memory error detector
==2579== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2579== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2579== Command: ./tester hands.txt draw.txt
==2579== Parent PID: 2578
==2579== 
==2579== Invalid read of size 8
==2579==    at 0x400DFB: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2579==    by 0x401A7D: main (test-input.c:81)
==2579==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2579== 
==2579== 
==2579== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2579==  Access not within mapped region at address 0x8
==2579==    at 0x400DFB: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2579==    by 0x401A7D: main (test-input.c:81)
==2579==  If you believe this happened as a result of a stack
==2579==  overflow in your program's main thread (unlikely but
==2579==  possible), you can try to increase the size of the
==2579==  main thread stack using the --main-stacksize= flag.
==2579==  The main thread stack size used in this run was 8388608.
==2579== 
==2579== HEAP SUMMARY:
==2579==     in use at exit: 328 bytes in 14 blocks
==2579==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==2579== 
==2579== LEAK SUMMARY:
==2579==    definitely lost: 56 bytes in 1 blocks
==2579==    indirectly lost: 56 bytes in 7 blocks
==2579==      possibly lost: 168 bytes in 1 blocks
==2579==    still reachable: 48 bytes in 5 blocks
==2579==         suppressed: 0 bytes in 0 blocks
==2579== Rerun with --leak-check=full to see details of leaked memory
==2579== 
==2579== For counts of detected and suppressed errors, rerun with: -v
==2579== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2584== Memcheck, a memory error detector
==2584== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2584== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2584== Command: ./tester hands.txt draw.txt
==2584== Parent PID: 2583
==2584== 
==2584== Invalid read of size 8
==2584==    at 0x4011BE: print_hand (in /graderhome/work/c4prj2_input/tester)
==2584==    by 0x401ABE: main (test-input.c:84)
==2584==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2584== 
==2584== 
==2584== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2584==  Access not within mapped region at address 0x8
==2584==    at 0x4011BE: print_hand (in /graderhome/work/c4prj2_input/tester)
==2584==    by 0x401ABE: main (test-input.c:84)
==2584==  If you believe this happened as a result of a stack
==2584==  overflow in your program's main thread (unlikely but
==2584==  possible), you can try to increase the size of the
==2584==  main thread stack using the --main-stacksize= flag.
==2584==  The main thread stack size used in this run was 8388608.
==2584== 
==2584== HEAP SUMMARY:
==2584==     in use at exit: 1,192 bytes in 41 blocks
==2584==   total heap usage: 79 allocs, 38 frees, 15,608 bytes allocated
==2584== 
==2584== LEAK SUMMARY:
==2584==    definitely lost: 728 bytes in 7 blocks
==2584==    indirectly lost: 224 bytes in 28 blocks
==2584==      possibly lost: 168 bytes in 1 blocks
==2584==    still reachable: 72 bytes in 5 blocks
==2584==         suppressed: 0 bytes in 0 blocks
==2584== Rerun with --leak-check=full to see details of leaked memory
==2584== 
==2584== For counts of detected and suppressed errors, rerun with: -v
==2584== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2590== Memcheck, a memory error detector
==2590== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2590== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2590== Command: ./tester h.txt d.txt
==2590== Parent PID: 2589
==2590== 
==2590== Invalid read of size 8
==2590==    at 0x400DFB: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2590==    by 0x401A7D: main (test-input.c:81)
==2590==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2590== 
==2590== 
==2590== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2590==  Access not within mapped region at address 0x8
==2590==    at 0x400DFB: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2590==    by 0x401A7D: main (test-input.c:81)
==2590==  If you believe this happened as a result of a stack
==2590==  overflow in your program's main thread (unlikely but
==2590==  possible), you can try to increase the size of the
==2590==  main thread stack using the --main-stacksize= flag.
==2590==  The main thread stack size used in this run was 8388608.
==2590== 
==2590== HEAP SUMMARY:
==2590==     in use at exit: 1,504 bytes in 62 blocks
==2590==   total heap usage: 115 allocs, 53 frees, 16,160 bytes allocated
==2590== 
==2590== LEAK SUMMARY:
==2590==    definitely lost: 728 bytes in 7 blocks
==2590==    indirectly lost: 224 bytes in 28 blocks
==2590==      possibly lost: 168 bytes in 1 blocks
==2590==    still reachable: 384 bytes in 26 blocks
==2590==         suppressed: 0 bytes in 0 blocks
==2590== Rerun with --leak-check=full to see details of leaked memory
==2590== 
==2590== For counts of detected and suppressed errors, rerun with: -v
==2590== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2596== Memcheck, a memory error detector
==2596== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2596== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2596== Command: ./tester i1 i2
==2596== Parent PID: 2595
==2596== 
==2596== Use of uninitialised value of size 8
==2596==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x4019A3: main (test-input.c:69)
==2596== 
==2596== Invalid write of size 8
==2596==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x4019A3: main (test-input.c:69)
==2596==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2596== 
==2596== 
==2596== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2596==  Access not within mapped region at address 0x0
==2596==    at 0x400D6F: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x400C8F: read_input (in /graderhome/work/c4prj2_input/tester)
==2596==    by 0x4019A3: main (test-input.c:69)
==2596==  If you believe this happened as a result of a stack
==2596==  overflow in your program's main thread (unlikely but
==2596==  possible), you can try to increase the size of the
==2596==  main thread stack using the --main-stacksize= flag.
==2596==  The main thread stack size used in this run was 8388608.
==2596== 
==2596== HEAP SUMMARY:
==2596==     in use at exit: 2,160 bytes in 45 blocks
==2596==   total heap usage: 79 allocs, 34 frees, 7,128 bytes allocated
==2596== 
==2596== LEAK SUMMARY:
==2596==    definitely lost: 936 bytes in 8 blocks
==2596==    indirectly lost: 232 bytes in 29 blocks
==2596==      possibly lost: 0 bytes in 0 blocks
==2596==    still reachable: 992 bytes in 8 blocks
==2596==         suppressed: 0 bytes in 0 blocks
==2596== Rerun with --leak-check=full to see details of leaked memory
==2596== 
==2596== For counts of detected and suppressed errors, rerun with: -v
==2596== Use --track-origins=yes to see where uninitialised values come from
==2596== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
