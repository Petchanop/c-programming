Grading at Wed Mar 10 08:06:12 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==152== Memcheck, a memory error detector
==152== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==152== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==152== Command: ./tester hands.txt draw.txt
==152== Parent PID: 151
==152== 
==152== Invalid read of size 8
==152==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==152==    by 0x401A76: main (test-input.c:81)
==152==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==152== 
==152== 
==152== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==152==  Access not within mapped region at address 0x0
==152==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==152==    by 0x401A76: main (test-input.c:81)
==152==  If you believe this happened as a result of a stack
==152==  overflow in your program's main thread (unlikely but
==152==  possible), you can try to increase the size of the
==152==  main thread stack using the --main-stacksize= flag.
==152==  The main thread stack size used in this run was 8388608.
==152== 
==152== HEAP SUMMARY:
==152==     in use at exit: 328 bytes in 14 blocks
==152==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==152== 
==152== LEAK SUMMARY:
==152==    definitely lost: 56 bytes in 1 blocks
==152==    indirectly lost: 56 bytes in 7 blocks
==152==      possibly lost: 168 bytes in 1 blocks
==152==    still reachable: 48 bytes in 5 blocks
==152==         suppressed: 0 bytes in 0 blocks
==152== Rerun with --leak-check=full to see details of leaked memory
==152== 
==152== For counts of detected and suppressed errors, rerun with: -v
==152== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==157== Memcheck, a memory error detector
==157== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==157== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==157== Command: ./tester hands.txt draw.txt
==157== Parent PID: 156
==157== 
==157== Invalid read of size 8
==157==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==157==    by 0x401A76: main (test-input.c:81)
==157==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==157== 
==157== 
==157== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==157==  Access not within mapped region at address 0x0
==157==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==157==    by 0x401A76: main (test-input.c:81)
==157==  If you believe this happened as a result of a stack
==157==  overflow in your program's main thread (unlikely but
==157==  possible), you can try to increase the size of the
==157==  main thread stack using the --main-stacksize= flag.
==157==  The main thread stack size used in this run was 8388608.
==157== 
==157== HEAP SUMMARY:
==157==     in use at exit: 1,168 bytes in 41 blocks
==157==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==157== 
==157== LEAK SUMMARY:
==157==    definitely lost: 728 bytes in 7 blocks
==157==    indirectly lost: 224 bytes in 28 blocks
==157==      possibly lost: 168 bytes in 1 blocks
==157==    still reachable: 48 bytes in 5 blocks
==157==         suppressed: 0 bytes in 0 blocks
==157== Rerun with --leak-check=full to see details of leaked memory
==157== 
==157== For counts of detected and suppressed errors, rerun with: -v
==157== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==163== Memcheck, a memory error detector
==163== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==163== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==163== Command: ./tester h.txt d.txt
==163== Parent PID: 162
==163== 
==163== Invalid read of size 8
==163==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==163==    by 0x401A76: main (test-input.c:81)
==163==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==163== 
==163== 
==163== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==163==  Access not within mapped region at address 0x0
==163==    at 0x400E4A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==163==    by 0x401A76: main (test-input.c:81)
==163==  If you believe this happened as a result of a stack
==163==  overflow in your program's main thread (unlikely but
==163==  possible), you can try to increase the size of the
==163==  main thread stack using the --main-stacksize= flag.
==163==  The main thread stack size used in this run was 8388608.
==163== 
==163== HEAP SUMMARY:
==163==     in use at exit: 1,480 bytes in 62 blocks
==163==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==163== 
==163== LEAK SUMMARY:
==163==    definitely lost: 728 bytes in 7 blocks
==163==    indirectly lost: 224 bytes in 28 blocks
==163==      possibly lost: 168 bytes in 1 blocks
==163==    still reachable: 360 bytes in 26 blocks
==163==         suppressed: 0 bytes in 0 blocks
==163== Rerun with --leak-check=full to see details of leaked memory
==163== 
==163== For counts of detected and suppressed errors, rerun with: -v
==163== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==169== Memcheck, a memory error detector
==169== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==169== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==169== Command: ./tester i1 i2
==169== Parent PID: 168
==169== 
==169== Use of uninitialised value of size 8
==169==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x40199C: main (test-input.c:69)
==169== 
==169== Invalid write of size 8
==169==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x40199C: main (test-input.c:69)
==169==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==169== 
==169== 
==169== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==169==  Access not within mapped region at address 0x0
==169==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==169==    by 0x40199C: main (test-input.c:69)
==169==  If you believe this happened as a result of a stack
==169==  overflow in your program's main thread (unlikely but
==169==  possible), you can try to increase the size of the
==169==  main thread stack using the --main-stacksize= flag.
==169==  The main thread stack size used in this run was 8388608.
==169== 
==169== HEAP SUMMARY:
==169==     in use at exit: 2,128 bytes in 45 blocks
==169==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==169== 
==169== LEAK SUMMARY:
==169==    definitely lost: 936 bytes in 8 blocks
==169==    indirectly lost: 232 bytes in 29 blocks
==169==      possibly lost: 0 bytes in 0 blocks
==169==    still reachable: 960 bytes in 8 blocks
==169==         suppressed: 0 bytes in 0 blocks
==169== Rerun with --leak-check=full to see details of leaked memory
==169== 
==169== For counts of detected and suppressed errors, rerun with: -v
==169== Use --track-origins=yes to see where uninitialised values come from
==169== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
