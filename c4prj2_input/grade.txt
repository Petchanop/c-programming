Grading at Tue Mar  9 11:57:23 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==3688== Memcheck, a memory error detector
==3688== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3688== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3688== Command: ./tester hands.txt draw.txt
==3688== Parent PID: 3687
==3688== 
==3688== Invalid read of size 8
==3688==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3688==    by 0x401A79: main (test-input.c:81)
==3688==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==3688== 
==3688== 
==3688== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3688==  Access not within mapped region at address 0x8
==3688==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3688==    by 0x401A79: main (test-input.c:81)
==3688==  If you believe this happened as a result of a stack
==3688==  overflow in your program's main thread (unlikely but
==3688==  possible), you can try to increase the size of the
==3688==  main thread stack using the --main-stacksize= flag.
==3688==  The main thread stack size used in this run was 8388608.
==3688== 
==3688== HEAP SUMMARY:
==3688==     in use at exit: 328 bytes in 14 blocks
==3688==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==3688== 
==3688== LEAK SUMMARY:
==3688==    definitely lost: 56 bytes in 1 blocks
==3688==    indirectly lost: 56 bytes in 7 blocks
==3688==      possibly lost: 168 bytes in 1 blocks
==3688==    still reachable: 48 bytes in 5 blocks
==3688==         suppressed: 0 bytes in 0 blocks
==3688== Rerun with --leak-check=full to see details of leaked memory
==3688== 
==3688== For counts of detected and suppressed errors, rerun with: -v
==3688== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==3693== Memcheck, a memory error detector
==3693== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3693== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3693== Command: ./tester hands.txt draw.txt
==3693== Parent PID: 3692
==3693== 
==3693== Invalid read of size 8
==3693==    at 0x401B57: main (test-input.c:94)
==3693==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3693== 
==3693== 
==3693== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3693==  Access not within mapped region at address 0x0
==3693==    at 0x401B57: main (test-input.c:94)
==3693==  If you believe this happened as a result of a stack
==3693==  overflow in your program's main thread (unlikely but
==3693==  possible), you can try to increase the size of the
==3693==  main thread stack using the --main-stacksize= flag.
==3693==  The main thread stack size used in this run was 8388608.
==3693== 
==3693== HEAP SUMMARY:
==3693==     in use at exit: 1,168 bytes in 41 blocks
==3693==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==3693== 
==3693== LEAK SUMMARY:
==3693==    definitely lost: 728 bytes in 7 blocks
==3693==    indirectly lost: 224 bytes in 28 blocks
==3693==      possibly lost: 168 bytes in 1 blocks
==3693==    still reachable: 48 bytes in 5 blocks
==3693==         suppressed: 0 bytes in 0 blocks
==3693== Rerun with --leak-check=full to see details of leaked memory
==3693== 
==3693== For counts of detected and suppressed errors, rerun with: -v
==3693== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==3699== Memcheck, a memory error detector
==3699== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3699== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3699== Command: ./tester h.txt d.txt
==3699== Parent PID: 3698
==3699== 
==3699== Invalid read of size 8
==3699==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3699==    by 0x401A79: main (test-input.c:81)
==3699==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==3699== 
==3699== 
==3699== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3699==  Access not within mapped region at address 0x8
==3699==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3699==    by 0x401A79: main (test-input.c:81)
==3699==  If you believe this happened as a result of a stack
==3699==  overflow in your program's main thread (unlikely but
==3699==  possible), you can try to increase the size of the
==3699==  main thread stack using the --main-stacksize= flag.
==3699==  The main thread stack size used in this run was 8388608.
==3699== 
==3699== HEAP SUMMARY:
==3699==     in use at exit: 1,480 bytes in 62 blocks
==3699==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==3699== 
==3699== LEAK SUMMARY:
==3699==    definitely lost: 728 bytes in 7 blocks
==3699==    indirectly lost: 224 bytes in 28 blocks
==3699==      possibly lost: 168 bytes in 1 blocks
==3699==    still reachable: 360 bytes in 26 blocks
==3699==         suppressed: 0 bytes in 0 blocks
==3699== Rerun with --leak-check=full to see details of leaked memory
==3699== 
==3699== For counts of detected and suppressed errors, rerun with: -v
==3699== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==3705== Memcheck, a memory error detector
==3705== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3705== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3705== Command: ./tester i1 i2
==3705== Parent PID: 3704
==3705== 
==3705== Use of uninitialised value of size 8
==3705==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x40199F: main (test-input.c:69)
==3705== 
==3705== Invalid write of size 8
==3705==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x40199F: main (test-input.c:69)
==3705==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3705== 
==3705== 
==3705== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3705==  Access not within mapped region at address 0x0
==3705==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3705==    by 0x40199F: main (test-input.c:69)
==3705==  If you believe this happened as a result of a stack
==3705==  overflow in your program's main thread (unlikely but
==3705==  possible), you can try to increase the size of the
==3705==  main thread stack using the --main-stacksize= flag.
==3705==  The main thread stack size used in this run was 8388608.
==3705== 
==3705== HEAP SUMMARY:
==3705==     in use at exit: 2,128 bytes in 45 blocks
==3705==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==3705== 
==3705== LEAK SUMMARY:
==3705==    definitely lost: 936 bytes in 8 blocks
==3705==    indirectly lost: 232 bytes in 29 blocks
==3705==      possibly lost: 0 bytes in 0 blocks
==3705==    still reachable: 960 bytes in 8 blocks
==3705==         suppressed: 0 bytes in 0 blocks
==3705== Rerun with --leak-check=full to see details of leaked memory
==3705== 
==3705== For counts of detected and suppressed errors, rerun with: -v
==3705== Use --track-origins=yes to see where uninitialised values come from
==3705== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
