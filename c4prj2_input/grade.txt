Grading at Tue Mar  9 12:07:15 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==3854== Memcheck, a memory error detector
==3854== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3854== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3854== Command: ./tester hands.txt draw.txt
==3854== Parent PID: 3853
==3854== 
==3854== Invalid read of size 8
==3854==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3854==    by 0x401A79: main (test-input.c:81)
==3854==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==3854== 
==3854== 
==3854== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3854==  Access not within mapped region at address 0x8
==3854==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3854==    by 0x401A79: main (test-input.c:81)
==3854==  If you believe this happened as a result of a stack
==3854==  overflow in your program's main thread (unlikely but
==3854==  possible), you can try to increase the size of the
==3854==  main thread stack using the --main-stacksize= flag.
==3854==  The main thread stack size used in this run was 8388608.
==3854== 
==3854== HEAP SUMMARY:
==3854==     in use at exit: 328 bytes in 14 blocks
==3854==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==3854== 
==3854== LEAK SUMMARY:
==3854==    definitely lost: 56 bytes in 1 blocks
==3854==    indirectly lost: 56 bytes in 7 blocks
==3854==      possibly lost: 168 bytes in 1 blocks
==3854==    still reachable: 48 bytes in 5 blocks
==3854==         suppressed: 0 bytes in 0 blocks
==3854== Rerun with --leak-check=full to see details of leaked memory
==3854== 
==3854== For counts of detected and suppressed errors, rerun with: -v
==3854== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==3859== Memcheck, a memory error detector
==3859== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3859== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3859== Command: ./tester hands.txt draw.txt
==3859== Parent PID: 3858
==3859== 
==3859== Invalid read of size 8
==3859==    at 0x401B57: main (test-input.c:94)
==3859==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3859== 
==3859== 
==3859== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3859==  Access not within mapped region at address 0x0
==3859==    at 0x401B57: main (test-input.c:94)
==3859==  If you believe this happened as a result of a stack
==3859==  overflow in your program's main thread (unlikely but
==3859==  possible), you can try to increase the size of the
==3859==  main thread stack using the --main-stacksize= flag.
==3859==  The main thread stack size used in this run was 8388608.
==3859== 
==3859== HEAP SUMMARY:
==3859==     in use at exit: 1,168 bytes in 41 blocks
==3859==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==3859== 
==3859== LEAK SUMMARY:
==3859==    definitely lost: 728 bytes in 7 blocks
==3859==    indirectly lost: 224 bytes in 28 blocks
==3859==      possibly lost: 168 bytes in 1 blocks
==3859==    still reachable: 48 bytes in 5 blocks
==3859==         suppressed: 0 bytes in 0 blocks
==3859== Rerun with --leak-check=full to see details of leaked memory
==3859== 
==3859== For counts of detected and suppressed errors, rerun with: -v
==3859== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==3865== Memcheck, a memory error detector
==3865== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3865== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3865== Command: ./tester h.txt d.txt
==3865== Parent PID: 3864
==3865== 
==3865== Invalid read of size 8
==3865==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3865==    by 0x401A79: main (test-input.c:81)
==3865==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==3865== 
==3865== 
==3865== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3865==  Access not within mapped region at address 0x8
==3865==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==3865==    by 0x401A79: main (test-input.c:81)
==3865==  If you believe this happened as a result of a stack
==3865==  overflow in your program's main thread (unlikely but
==3865==  possible), you can try to increase the size of the
==3865==  main thread stack using the --main-stacksize= flag.
==3865==  The main thread stack size used in this run was 8388608.
==3865== 
==3865== HEAP SUMMARY:
==3865==     in use at exit: 1,480 bytes in 62 blocks
==3865==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==3865== 
==3865== LEAK SUMMARY:
==3865==    definitely lost: 728 bytes in 7 blocks
==3865==    indirectly lost: 224 bytes in 28 blocks
==3865==      possibly lost: 168 bytes in 1 blocks
==3865==    still reachable: 360 bytes in 26 blocks
==3865==         suppressed: 0 bytes in 0 blocks
==3865== Rerun with --leak-check=full to see details of leaked memory
==3865== 
==3865== For counts of detected and suppressed errors, rerun with: -v
==3865== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==3871== Memcheck, a memory error detector
==3871== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==3871== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==3871== Command: ./tester i1 i2
==3871== Parent PID: 3870
==3871== 
==3871== Use of uninitialised value of size 8
==3871==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x40199F: main (test-input.c:69)
==3871== 
==3871== Invalid write of size 8
==3871==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x40199F: main (test-input.c:69)
==3871==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3871== 
==3871== 
==3871== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==3871==  Access not within mapped region at address 0x0
==3871==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==3871==    by 0x40199F: main (test-input.c:69)
==3871==  If you believe this happened as a result of a stack
==3871==  overflow in your program's main thread (unlikely but
==3871==  possible), you can try to increase the size of the
==3871==  main thread stack using the --main-stacksize= flag.
==3871==  The main thread stack size used in this run was 8388608.
==3871== 
==3871== HEAP SUMMARY:
==3871==     in use at exit: 2,128 bytes in 45 blocks
==3871==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==3871== 
==3871== LEAK SUMMARY:
==3871==    definitely lost: 936 bytes in 8 blocks
==3871==    indirectly lost: 232 bytes in 29 blocks
==3871==      possibly lost: 0 bytes in 0 blocks
==3871==    still reachable: 960 bytes in 8 blocks
==3871==         suppressed: 0 bytes in 0 blocks
==3871== Rerun with --leak-check=full to see details of leaked memory
==3871== 
==3871== For counts of detected and suppressed errors, rerun with: -v
==3871== Use --track-origins=yes to see where uninitialised values come from
==3871== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
