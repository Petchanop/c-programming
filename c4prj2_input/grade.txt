Grading at Tue Mar  9 11:15:44 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==2886== Memcheck, a memory error detector
==2886== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2886== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2886== Command: ./tester hands.txt draw.txt
==2886== Parent PID: 2885
==2886== 
==2886== Invalid read of size 8
==2886==    at 0x400E05: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2886==    by 0x401A87: main (test-input.c:81)
==2886==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2886== 
==2886== 
==2886== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2886==  Access not within mapped region at address 0x8
==2886==    at 0x400E05: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2886==    by 0x401A87: main (test-input.c:81)
==2886==  If you believe this happened as a result of a stack
==2886==  overflow in your program's main thread (unlikely but
==2886==  possible), you can try to increase the size of the
==2886==  main thread stack using the --main-stacksize= flag.
==2886==  The main thread stack size used in this run was 8388608.
==2886== 
==2886== HEAP SUMMARY:
==2886==     in use at exit: 328 bytes in 14 blocks
==2886==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==2886== 
==2886== LEAK SUMMARY:
==2886==    definitely lost: 56 bytes in 1 blocks
==2886==    indirectly lost: 56 bytes in 7 blocks
==2886==      possibly lost: 168 bytes in 1 blocks
==2886==    still reachable: 48 bytes in 5 blocks
==2886==         suppressed: 0 bytes in 0 blocks
==2886== Rerun with --leak-check=full to see details of leaked memory
==2886== 
==2886== For counts of detected and suppressed errors, rerun with: -v
==2886== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==2891== Memcheck, a memory error detector
==2891== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2891== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2891== Command: ./tester hands.txt draw.txt
==2891== Parent PID: 2890
==2891== 
==2891== Invalid read of size 8
==2891==    at 0x401B65: main (test-input.c:94)
==2891==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2891== 
==2891== 
==2891== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2891==  Access not within mapped region at address 0x0
==2891==    at 0x401B65: main (test-input.c:94)
==2891==  If you believe this happened as a result of a stack
==2891==  overflow in your program's main thread (unlikely but
==2891==  possible), you can try to increase the size of the
==2891==  main thread stack using the --main-stacksize= flag.
==2891==  The main thread stack size used in this run was 8388608.
==2891== 
==2891== HEAP SUMMARY:
==2891==     in use at exit: 1,168 bytes in 41 blocks
==2891==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==2891== 
==2891== LEAK SUMMARY:
==2891==    definitely lost: 728 bytes in 7 blocks
==2891==    indirectly lost: 224 bytes in 28 blocks
==2891==      possibly lost: 168 bytes in 1 blocks
==2891==    still reachable: 48 bytes in 5 blocks
==2891==         suppressed: 0 bytes in 0 blocks
==2891== Rerun with --leak-check=full to see details of leaked memory
==2891== 
==2891== For counts of detected and suppressed errors, rerun with: -v
==2891== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2897== Memcheck, a memory error detector
==2897== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2897== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2897== Command: ./tester h.txt d.txt
==2897== Parent PID: 2896
==2897== 
==2897== Invalid read of size 8
==2897==    at 0x400E05: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2897==    by 0x401A87: main (test-input.c:81)
==2897==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2897== 
==2897== 
==2897== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2897==  Access not within mapped region at address 0x8
==2897==    at 0x400E05: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==2897==    by 0x401A87: main (test-input.c:81)
==2897==  If you believe this happened as a result of a stack
==2897==  overflow in your program's main thread (unlikely but
==2897==  possible), you can try to increase the size of the
==2897==  main thread stack using the --main-stacksize= flag.
==2897==  The main thread stack size used in this run was 8388608.
==2897== 
==2897== HEAP SUMMARY:
==2897==     in use at exit: 1,480 bytes in 62 blocks
==2897==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==2897== 
==2897== LEAK SUMMARY:
==2897==    definitely lost: 728 bytes in 7 blocks
==2897==    indirectly lost: 224 bytes in 28 blocks
==2897==      possibly lost: 168 bytes in 1 blocks
==2897==    still reachable: 360 bytes in 26 blocks
==2897==         suppressed: 0 bytes in 0 blocks
==2897== Rerun with --leak-check=full to see details of leaked memory
==2897== 
==2897== For counts of detected and suppressed errors, rerun with: -v
==2897== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2903== Memcheck, a memory error detector
==2903== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2903== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2903== Command: ./tester i1 i2
==2903== Parent PID: 2902
==2903== 
==2903== Use of uninitialised value of size 8
==2903==    at 0x400D79: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400C7A: read_input (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x4019AD: main (test-input.c:69)
==2903== 
==2903== Invalid write of size 8
==2903==    at 0x400D79: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400C7A: read_input (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x4019AD: main (test-input.c:69)
==2903==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2903== 
==2903== 
==2903== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2903==  Access not within mapped region at address 0x0
==2903==    at 0x400D79: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x400C7A: read_input (in /graderhome/work/c4prj2_input/tester)
==2903==    by 0x4019AD: main (test-input.c:69)
==2903==  If you believe this happened as a result of a stack
==2903==  overflow in your program's main thread (unlikely but
==2903==  possible), you can try to increase the size of the
==2903==  main thread stack using the --main-stacksize= flag.
==2903==  The main thread stack size used in this run was 8388608.
==2903== 
==2903== HEAP SUMMARY:
==2903==     in use at exit: 2,128 bytes in 45 blocks
==2903==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==2903== 
==2903== LEAK SUMMARY:
==2903==    definitely lost: 936 bytes in 8 blocks
==2903==    indirectly lost: 232 bytes in 29 blocks
==2903==      possibly lost: 0 bytes in 0 blocks
==2903==    still reachable: 960 bytes in 8 blocks
==2903==         suppressed: 0 bytes in 0 blocks
==2903== Rerun with --leak-check=full to see details of leaked memory
==2903== 
==2903== For counts of detected and suppressed errors, rerun with: -v
==2903== Use --track-origins=yes to see where uninitialised values come from
==2903== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
