Grading at Wed Mar 10 09:37:21 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==546== Memcheck, a memory error detector
==546== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==546== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==546== Command: ./tester hands.txt draw.txt
==546== Parent PID: 545
==546== 
==546== Invalid read of size 8
==546==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==546==    by 0x401BEF: main (test-input.c:81)
==546==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==546== 
==546== 
==546== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==546==  Access not within mapped region at address 0x0
==546==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==546==    by 0x401BEF: main (test-input.c:81)
==546==  If you believe this happened as a result of a stack
==546==  overflow in your program's main thread (unlikely but
==546==  possible), you can try to increase the size of the
==546==  main thread stack using the --main-stacksize= flag.
==546==  The main thread stack size used in this run was 8388608.
==546== 
==546== HEAP SUMMARY:
==546==     in use at exit: 328 bytes in 14 blocks
==546==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==546== 
==546== LEAK SUMMARY:
==546==    definitely lost: 56 bytes in 1 blocks
==546==    indirectly lost: 56 bytes in 7 blocks
==546==      possibly lost: 168 bytes in 1 blocks
==546==    still reachable: 48 bytes in 5 blocks
==546==         suppressed: 0 bytes in 0 blocks
==546== Rerun with --leak-check=full to see details of leaked memory
==546== 
==546== For counts of detected and suppressed errors, rerun with: -v
==546== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==551== Memcheck, a memory error detector
==551== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==551== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==551== Command: ./tester hands.txt draw.txt
==551== Parent PID: 550
==551== 
==551== Invalid read of size 8
==551==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==551==    by 0x401BEF: main (test-input.c:81)
==551==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==551== 
==551== 
==551== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==551==  Access not within mapped region at address 0x0
==551==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==551==    by 0x401BEF: main (test-input.c:81)
==551==  If you believe this happened as a result of a stack
==551==  overflow in your program's main thread (unlikely but
==551==  possible), you can try to increase the size of the
==551==  main thread stack using the --main-stacksize= flag.
==551==  The main thread stack size used in this run was 8388608.
==551== 
==551== HEAP SUMMARY:
==551==     in use at exit: 1,168 bytes in 41 blocks
==551==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==551== 
==551== LEAK SUMMARY:
==551==    definitely lost: 728 bytes in 7 blocks
==551==    indirectly lost: 224 bytes in 28 blocks
==551==      possibly lost: 168 bytes in 1 blocks
==551==    still reachable: 48 bytes in 5 blocks
==551==         suppressed: 0 bytes in 0 blocks
==551== Rerun with --leak-check=full to see details of leaked memory
==551== 
==551== For counts of detected and suppressed errors, rerun with: -v
==551== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==557== Memcheck, a memory error detector
==557== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==557== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==557== Command: ./tester h.txt d.txt
==557== Parent PID: 556
==557== 
==557== Invalid read of size 8
==557==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==557==    by 0x401BEF: main (test-input.c:81)
==557==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==557== 
==557== 
==557== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==557==  Access not within mapped region at address 0x0
==557==    at 0x400FC3: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==557==    by 0x401BEF: main (test-input.c:81)
==557==  If you believe this happened as a result of a stack
==557==  overflow in your program's main thread (unlikely but
==557==  possible), you can try to increase the size of the
==557==  main thread stack using the --main-stacksize= flag.
==557==  The main thread stack size used in this run was 8388608.
==557== 
==557== HEAP SUMMARY:
==557==     in use at exit: 1,480 bytes in 62 blocks
==557==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==557== 
==557== LEAK SUMMARY:
==557==    definitely lost: 728 bytes in 7 blocks
==557==    indirectly lost: 224 bytes in 28 blocks
==557==      possibly lost: 168 bytes in 1 blocks
==557==    still reachable: 360 bytes in 26 blocks
==557==         suppressed: 0 bytes in 0 blocks
==557== Rerun with --leak-check=full to see details of leaked memory
==557== 
==557== For counts of detected and suppressed errors, rerun with: -v
==557== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==563== Memcheck, a memory error detector
==563== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==563== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==563== Command: ./tester i1 i2
==563== Parent PID: 562
==563== 
==563== Invalid read of size 8
==563==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x401B15: main (test-input.c:69)
==563==  Address 0x18 is not stack'd, malloc'd or (recently) free'd
==563== 
==563== 
==563== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==563==  Access not within mapped region at address 0x18
==563==    at 0x400D65: add_future_card (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==563==    by 0x401B15: main (test-input.c:69)
==563==  If you believe this happened as a result of a stack
==563==  overflow in your program's main thread (unlikely but
==563==  possible), you can try to increase the size of the
==563==  main thread stack using the --main-stacksize= flag.
==563==  The main thread stack size used in this run was 8388608.
==563== 
==563== HEAP SUMMARY:
==563==     in use at exit: 2,048 bytes in 44 blocks
==563==   total heap usage: 78 allocs, 34 frees, 6,968 bytes allocated
==563== 
==563== LEAK SUMMARY:
==563==    definitely lost: 936 bytes in 8 blocks
==563==    indirectly lost: 232 bytes in 29 blocks
==563==      possibly lost: 0 bytes in 0 blocks
==563==    still reachable: 880 bytes in 7 blocks
==563==         suppressed: 0 bytes in 0 blocks
==563== Rerun with --leak-check=full to see details of leaked memory
==563== 
==563== For counts of detected and suppressed errors, rerun with: -v
==563== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
