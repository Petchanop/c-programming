Grading at Tue Mar  9 12:09:40 UTC 2021
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==4021== Memcheck, a memory error detector
==4021== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4021== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4021== Command: ./tester hands.txt draw.txt
==4021== Parent PID: 4020
==4021== 
==4021== Invalid read of size 8
==4021==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4021==    by 0x401A7A: main (test-input.c:81)
==4021==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4021== 
==4021== 
==4021== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4021==  Access not within mapped region at address 0x8
==4021==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4021==    by 0x401A7A: main (test-input.c:81)
==4021==  If you believe this happened as a result of a stack
==4021==  overflow in your program's main thread (unlikely but
==4021==  possible), you can try to increase the size of the
==4021==  main thread stack using the --main-stacksize= flag.
==4021==  The main thread stack size used in this run was 8388608.
==4021== 
==4021== HEAP SUMMARY:
==4021==     in use at exit: 328 bytes in 14 blocks
==4021==   total heap usage: 28 allocs, 14 frees, 14,144 bytes allocated
==4021== 
==4021== LEAK SUMMARY:
==4021==    definitely lost: 56 bytes in 1 blocks
==4021==    indirectly lost: 56 bytes in 7 blocks
==4021==      possibly lost: 168 bytes in 1 blocks
==4021==    still reachable: 48 bytes in 5 blocks
==4021==         suppressed: 0 bytes in 0 blocks
==4021== Rerun with --leak-check=full to see details of leaked memory
==4021== 
==4021== For counts of detected and suppressed errors, rerun with: -v
==4021== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==4026== Memcheck, a memory error detector
==4026== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4026== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4026== Command: ./tester hands.txt draw.txt
==4026== Parent PID: 4025
==4026== 
==4026== Invalid read of size 8
==4026==    at 0x401B58: main (test-input.c:94)
==4026==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4026== 
==4026== 
==4026== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4026==  Access not within mapped region at address 0x0
==4026==    at 0x401B58: main (test-input.c:94)
==4026==  If you believe this happened as a result of a stack
==4026==  overflow in your program's main thread (unlikely but
==4026==  possible), you can try to increase the size of the
==4026==  main thread stack using the --main-stacksize= flag.
==4026==  The main thread stack size used in this run was 8388608.
==4026== 
==4026== HEAP SUMMARY:
==4026==     in use at exit: 1,168 bytes in 41 blocks
==4026==   total heap usage: 79 allocs, 38 frees, 15,560 bytes allocated
==4026== 
==4026== LEAK SUMMARY:
==4026==    definitely lost: 728 bytes in 7 blocks
==4026==    indirectly lost: 224 bytes in 28 blocks
==4026==      possibly lost: 168 bytes in 1 blocks
==4026==    still reachable: 48 bytes in 5 blocks
==4026==         suppressed: 0 bytes in 0 blocks
==4026== Rerun with --leak-check=full to see details of leaked memory
==4026== 
==4026== For counts of detected and suppressed errors, rerun with: -v
==4026== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==4032== Memcheck, a memory error detector
==4032== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4032== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4032== Command: ./tester h.txt d.txt
==4032== Parent PID: 4031
==4032== 
==4032== Invalid read of size 8
==4032==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4032==    by 0x401A7A: main (test-input.c:81)
==4032==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4032== 
==4032== 
==4032== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4032==  Access not within mapped region at address 0x8
==4032==    at 0x400E2A: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==4032==    by 0x401A7A: main (test-input.c:81)
==4032==  If you believe this happened as a result of a stack
==4032==  overflow in your program's main thread (unlikely but
==4032==  possible), you can try to increase the size of the
==4032==  main thread stack using the --main-stacksize= flag.
==4032==  The main thread stack size used in this run was 8388608.
==4032== 
==4032== HEAP SUMMARY:
==4032==     in use at exit: 1,480 bytes in 62 blocks
==4032==   total heap usage: 115 allocs, 53 frees, 16,112 bytes allocated
==4032== 
==4032== LEAK SUMMARY:
==4032==    definitely lost: 728 bytes in 7 blocks
==4032==    indirectly lost: 224 bytes in 28 blocks
==4032==      possibly lost: 168 bytes in 1 blocks
==4032==    still reachable: 360 bytes in 26 blocks
==4032==         suppressed: 0 bytes in 0 blocks
==4032== Rerun with --leak-check=full to see details of leaked memory
==4032== 
==4032== For counts of detected and suppressed errors, rerun with: -v
==4032== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==4038== Memcheck, a memory error detector
==4038== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4038== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4038== Command: ./tester i1 i2
==4038== Parent PID: 4037
==4038== 
==4038== Use of uninitialised value of size 8
==4038==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x4019A0: main (test-input.c:69)
==4038== 
==4038== Invalid write of size 8
==4038==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x4019A0: main (test-input.c:69)
==4038==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4038== 
==4038== 
==4038== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4038==  Access not within mapped region at address 0x0
==4038==    at 0x400D9E: add_future_card (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400BB8: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x400C7D: read_input (in /graderhome/work/c4prj2_input/tester)
==4038==    by 0x4019A0: main (test-input.c:69)
==4038==  If you believe this happened as a result of a stack
==4038==  overflow in your program's main thread (unlikely but
==4038==  possible), you can try to increase the size of the
==4038==  main thread stack using the --main-stacksize= flag.
==4038==  The main thread stack size used in this run was 8388608.
==4038== 
==4038== HEAP SUMMARY:
==4038==     in use at exit: 2,128 bytes in 45 blocks
==4038==   total heap usage: 79 allocs, 34 frees, 7,048 bytes allocated
==4038== 
==4038== LEAK SUMMARY:
==4038==    definitely lost: 936 bytes in 8 blocks
==4038==    indirectly lost: 232 bytes in 29 blocks
==4038==      possibly lost: 0 bytes in 0 blocks
==4038==    still reachable: 960 bytes in 8 blocks
==4038==         suppressed: 0 bytes in 0 blocks
==4038== Rerun with --leak-check=full to see details of leaked memory
==4038== 
==4038== For counts of detected and suppressed errors, rerun with: -v
==4038== Use --track-origins=yes to see where uninitialised values come from
==4038== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
