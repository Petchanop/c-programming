Grading at Tue Jan 26 08:34:13 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==262== Memcheck, a memory error detector
==262== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==262== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==262== Command: ./test-eval inp.2.txt
==262== Parent PID: 261
==262== 
==262== Invalid read of size 8
==262==    at 0x4019A7: build_hand_from_match (eval.c:162)
==262==    by 0x402363: evaluate_hand (eval.c:339)
==262==    by 0x40276D: describe_hand (test-eval.c:68)
==262==    by 0x4029B8: main (test-eval.c:119)
==262==  Address 0x52092c0 is 0 bytes after a block of size 48 alloc'd
==262==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==262==    by 0x400FCD: add_card_to (deck-c4.c:29)
==262==    by 0x403177: hand_from_string (input.c:49)
==262==    by 0x402932: main (test-eval.c:111)
==262== 
==262== Invalid read of size 8
==262==    at 0x400C01: print_hand (deck.c:9)
==262==    by 0x4027B8: describe_hand (test-eval.c:74)
==262==    by 0x4029B8: main (test-eval.c:119)
==262==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==262== 
==262== 
==262== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==262==  Access not within mapped region at address 0x0
==262==    at 0x400C01: print_hand (deck.c:9)
==262==    by 0x4027B8: describe_hand (test-eval.c:74)
==262==    by 0x4029B8: main (test-eval.c:119)
==262==  If you believe this happened as a result of a stack
==262==  overflow in your program's main thread (unlikely but
==262==  possible), you can try to increase the size of the
==262==  main thread stack using the --main-stacksize= flag.
==262==  The main thread stack size used in this run was 8388608.
==262== 
==262== HEAP SUMMARY:
==262==     in use at exit: 896 bytes in 18 blocks
==262==   total heap usage: 146 allocs, 128 frees, 11,444 bytes allocated
==262== 
==262== LEAK SUMMARY:
==262==    definitely lost: 0 bytes in 0 blocks
==262==    indirectly lost: 0 bytes in 0 blocks
==262==      possibly lost: 0 bytes in 0 blocks
==262==    still reachable: 896 bytes in 18 blocks
==262==         suppressed: 0 bytes in 0 blocks
==262== Rerun with --leak-check=full to see details of leaked memory
==262== 
==262== For counts of detected and suppressed errors, rerun with: -v
==262== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
 Checking the output 
Your file matched the expected output
 - Testcase passed

Overall Grade: B
