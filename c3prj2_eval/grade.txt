Grading at Mon Jan 25 10:27:11 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1051== Memcheck, a memory error detector
==1051== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1051== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1051== Command: ./test-eval inp.2.txt
==1051== Parent PID: 1050
==1051== 
==1051== Invalid read of size 8
==1051==    at 0x401462: card_ptr_comp (eval.c:11)
==1051==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1051==    by 0x4E7369E: qsort_r (msort.c:297)
==1051==    by 0x401AF5: compare_hands (eval.c:176)
==1051==    by 0x402A7E: main (test-eval.c:124)
==1051==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==1051==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1051==    by 0x400FCD: add_card_to (deck-c4.c:29)
==1051==    by 0x4031E8: hand_from_string (input.c:49)
==1051==    by 0x402A67: main (test-eval.c:123)
==1051== 
==1051== Invalid read of size 4
==1051==    at 0x401465: card_ptr_comp (eval.c:11)
==1051==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1051==    by 0x4E7369E: qsort_r (msort.c:297)
==1051==    by 0x401AF5: compare_hands (eval.c:176)
==1051==    by 0x402A7E: main (test-eval.c:124)
==1051==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1051== 
==1051== 
==1051== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1051==  Access not within mapped region at address 0x0
==1051==    at 0x401465: card_ptr_comp (eval.c:11)
==1051==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1051==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1051==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1051==    by 0x4E7369E: qsort_r (msort.c:297)
==1051==    by 0x401AF5: compare_hands (eval.c:176)
==1051==    by 0x402A7E: main (test-eval.c:124)
==1051==  If you believe this happened as a result of a stack
==1051==  overflow in your program's main thread (unlikely but
==1051==  possible), you can try to increase the size of the
==1051==  main thread stack using the --main-stacksize= flag.
==1051==  The main thread stack size used in this run was 8388608.
==1051== 
==1051== HEAP SUMMARY:
==1051==     in use at exit: 880 bytes in 17 blocks
==1051==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==1051== 
==1051== LEAK SUMMARY:
==1051==    definitely lost: 0 bytes in 0 blocks
==1051==    indirectly lost: 0 bytes in 0 blocks
==1051==      possibly lost: 0 bytes in 0 blocks
==1051==    still reachable: 880 bytes in 17 blocks
==1051==         suppressed: 0 bytes in 0 blocks
==1051== Rerun with --leak-check=full to see details of leaked memory
==1051== 
==1051== For counts of detected and suppressed errors, rerun with: -v
==1051== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1104== Memcheck, a memory error detector
==1104== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1104== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1104== Command: ./test-eval inp.7.txt
==1104== Parent PID: 1103
==1104== 
==1104== Invalid read of size 8
==1104==    at 0x401462: card_ptr_comp (eval.c:11)
==1104==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1104==    by 0x4E7369E: qsort_r (msort.c:297)
==1104==    by 0x401AF5: compare_hands (eval.c:176)
==1104==    by 0x402A7E: main (test-eval.c:124)
==1104==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==1104==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1104==    by 0x400FCD: add_card_to (deck-c4.c:29)
==1104==    by 0x4031E8: hand_from_string (input.c:49)
==1104==    by 0x402A67: main (test-eval.c:123)
==1104== 
==1104== Invalid read of size 4
==1104==    at 0x401465: card_ptr_comp (eval.c:11)
==1104==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1104==    by 0x4E7369E: qsort_r (msort.c:297)
==1104==    by 0x401AF5: compare_hands (eval.c:176)
==1104==    by 0x402A7E: main (test-eval.c:124)
==1104==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1104== 
==1104== 
==1104== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1104==  Access not within mapped region at address 0x0
==1104==    at 0x401465: card_ptr_comp (eval.c:11)
==1104==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1104==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1104==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1104==    by 0x4E7369E: qsort_r (msort.c:297)
==1104==    by 0x401AF5: compare_hands (eval.c:176)
==1104==    by 0x402A7E: main (test-eval.c:124)
==1104==  If you believe this happened as a result of a stack
==1104==  overflow in your program's main thread (unlikely but
==1104==  possible), you can try to increase the size of the
==1104==  main thread stack using the --main-stacksize= flag.
==1104==  The main thread stack size used in this run was 8388608.
==1104== 
==1104== HEAP SUMMARY:
==1104==     in use at exit: 912 bytes in 19 blocks
==1104==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==1104== 
==1104== LEAK SUMMARY:
==1104==    definitely lost: 0 bytes in 0 blocks
==1104==    indirectly lost: 0 bytes in 0 blocks
==1104==      possibly lost: 0 bytes in 0 blocks
==1104==    still reachable: 912 bytes in 19 blocks
==1104==         suppressed: 0 bytes in 0 blocks
==1104== Rerun with --leak-check=full to see details of leaked memory
==1104== 
==1104== For counts of detected and suppressed errors, rerun with: -v
==1104== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 9: Trying hands with straight flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1133== Memcheck, a memory error detector
==1133== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1133== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1133== Command: ./test-eval inp.10.txt
==1133== Parent PID: 1132
==1133== 
==1133== Invalid read of size 8
==1133==    at 0x401462: card_ptr_comp (eval.c:11)
==1133==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1133==    by 0x4E7369E: qsort_r (msort.c:297)
==1133==    by 0x401AF5: compare_hands (eval.c:176)
==1133==    by 0x402A7E: main (test-eval.c:124)
==1133==  Address 0x520b2b8 is 0 bytes after a block of size 40 alloc'd
==1133==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1133==    by 0x400FCD: add_card_to (deck-c4.c:29)
==1133==    by 0x4031E8: hand_from_string (input.c:49)
==1133==    by 0x402A67: main (test-eval.c:123)
==1133== 
==1133== Invalid read of size 4
==1133==    at 0x401465: card_ptr_comp (eval.c:11)
==1133==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1133==    by 0x4E7369E: qsort_r (msort.c:297)
==1133==    by 0x401AF5: compare_hands (eval.c:176)
==1133==    by 0x402A7E: main (test-eval.c:124)
==1133==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1133== 
==1133== 
==1133== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1133==  Access not within mapped region at address 0x0
==1133==    at 0x401465: card_ptr_comp (eval.c:11)
==1133==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1133==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1133==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1133==    by 0x4E7369E: qsort_r (msort.c:297)
==1133==    by 0x401AF5: compare_hands (eval.c:176)
==1133==    by 0x402A7E: main (test-eval.c:124)
==1133==  If you believe this happened as a result of a stack
==1133==  overflow in your program's main thread (unlikely but
==1133==  possible), you can try to increase the size of the
==1133==  main thread stack using the --main-stacksize= flag.
==1133==  The main thread stack size used in this run was 8388608.
==1133== 
==1133== HEAP SUMMARY:
==1133==     in use at exit: 880 bytes in 17 blocks
==1133==   total heap usage: 234 allocs, 217 frees, 13,124 bytes allocated
==1133== 
==1133== LEAK SUMMARY:
==1133==    definitely lost: 0 bytes in 0 blocks
==1133==    indirectly lost: 0 bytes in 0 blocks
==1133==      possibly lost: 0 bytes in 0 blocks
==1133==    still reachable: 880 bytes in 17 blocks
==1133==         suppressed: 0 bytes in 0 blocks
==1133== Rerun with --leak-check=full to see details of leaked memory
==1133== 
==1133== For counts of detected and suppressed errors, rerun with: -v
==1133== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: C
