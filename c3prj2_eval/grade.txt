Grading at Sat Jan 23 18:28:28 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==464== Memcheck, a memory error detector
==464== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==464== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==464== Command: ./test-eval inp.1.txt
==464== Parent PID: 463
==464== 
==464== Invalid read of size 8
==464==    at 0x40142B: card_ptr_comp (eval.c:9)
==464==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==464==    by 0x4E7369E: qsort_r (msort.c:297)
==464==    by 0x401924: compare_hands (eval.c:167)
==464==    by 0x402931: main (test-eval.c:124)
==464==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==464==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==464==    by 0x400FDA: add_card_to (deck-c4.c:29)
==464==    by 0x40309B: hand_from_string (input.c:49)
==464==    by 0x402905: main (test-eval.c:122)
==464== 
==464== Invalid read of size 4
==464==    at 0x40142E: card_ptr_comp (eval.c:9)
==464==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==464==    by 0x4E7369E: qsort_r (msort.c:297)
==464==    by 0x401924: compare_hands (eval.c:167)
==464==    by 0x402931: main (test-eval.c:124)
==464==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==464== 
==464== 
==464== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==464==  Access not within mapped region at address 0x0
==464==    at 0x40142E: card_ptr_comp (eval.c:9)
==464==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==464==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==464==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==464==    by 0x4E7369E: qsort_r (msort.c:297)
==464==    by 0x401924: compare_hands (eval.c:167)
==464==    by 0x402931: main (test-eval.c:124)
==464==  If you believe this happened as a result of a stack
==464==  overflow in your program's main thread (unlikely but
==464==  possible), you can try to increase the size of the
==464==  main thread stack using the --main-stacksize= flag.
==464==  The main thread stack size used in this run was 8388608.
==464== 
==464== HEAP SUMMARY:
==464==     in use at exit: 896 bytes in 18 blocks
==464==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==464== 
==464== LEAK SUMMARY:
==464==    definitely lost: 0 bytes in 0 blocks
==464==    indirectly lost: 0 bytes in 0 blocks
==464==      possibly lost: 0 bytes in 0 blocks
==464==    still reachable: 896 bytes in 18 blocks
==464==         suppressed: 0 bytes in 0 blocks
==464== Rerun with --leak-check=full to see details of leaked memory
==464== 
==464== For counts of detected and suppressed errors, rerun with: -v
==464== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==469== Memcheck, a memory error detector
==469== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==469== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==469== Command: ./test-eval inp.2.txt
==469== Parent PID: 468
==469== 
==469== Invalid read of size 8
==469==    at 0x401869: build_hand_from_match (eval.c:156)
==469==    by 0x402287: evaluate_hand (eval.c:325)
==469==    by 0x402691: describe_hand (test-eval.c:68)
==469==    by 0x4028DC: main (test-eval.c:119)
==469==  Address 0x5205b38 is 0 bytes after a block of size 40 alloc'd
==469==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==469==    by 0x400FDA: add_card_to (deck-c4.c:29)
==469==    by 0x40309B: hand_from_string (input.c:49)
==469==    by 0x402856: main (test-eval.c:111)
==469== 
==469== Invalid read of size 8
==469==    at 0x400C0A: print_hand (deck.c:10)
==469==    by 0x4026DC: describe_hand (test-eval.c:74)
==469==    by 0x4028DC: main (test-eval.c:119)
==469==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==469== 
==469== 
==469== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==469==  Access not within mapped region at address 0x0
==469==    at 0x400C0A: print_hand (deck.c:10)
==469==    by 0x4026DC: describe_hand (test-eval.c:74)
==469==    by 0x4028DC: main (test-eval.c:119)
==469==  If you believe this happened as a result of a stack
==469==  overflow in your program's main thread (unlikely but
==469==  possible), you can try to increase the size of the
==469==  main thread stack using the --main-stacksize= flag.
==469==  The main thread stack size used in this run was 8388608.
==469== 
==469== HEAP SUMMARY:
==469==     in use at exit: 880 bytes in 17 blocks
==469==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==469== 
==469== LEAK SUMMARY:
==469==    definitely lost: 0 bytes in 0 blocks
==469==    indirectly lost: 0 bytes in 0 blocks
==469==      possibly lost: 0 bytes in 0 blocks
==469==    still reachable: 880 bytes in 17 blocks
==469==         suppressed: 0 bytes in 0 blocks
==469== Rerun with --leak-check=full to see details of leaked memory
==469== 
==469== For counts of detected and suppressed errors, rerun with: -v
==469== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==474== Memcheck, a memory error detector
==474== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==474== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==474== Command: ./test-eval inp.3.txt
==474== Parent PID: 473
==474== 
==474== Invalid read of size 8
==474==    at 0x401869: build_hand_from_match (eval.c:156)
==474==    by 0x402175: evaluate_hand (eval.c:309)
==474==    by 0x402691: describe_hand (test-eval.c:68)
==474==    by 0x4028BC: main (test-eval.c:116)
==474==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==474==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==474==    by 0x400FDA: add_card_to (deck-c4.c:29)
==474==    by 0x40309B: hand_from_string (input.c:49)
==474==    by 0x402841: main (test-eval.c:110)
==474== 
==474== Invalid read of size 8
==474==    at 0x401869: build_hand_from_match (eval.c:156)
==474==    by 0x402175: evaluate_hand (eval.c:309)
==474==    by 0x402691: describe_hand (test-eval.c:68)
==474==    by 0x4028DC: main (test-eval.c:119)
==474==  Address 0x5205a78 is 0 bytes after a block of size 40 alloc'd
==474==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==474==    by 0x400FDA: add_card_to (deck-c4.c:29)
==474==    by 0x40309B: hand_from_string (input.c:49)
==474==    by 0x402856: main (test-eval.c:111)
==474== 
==474== Invalid read of size 8
==474==    at 0x401422: card_ptr_comp (eval.c:9)
==474==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==474==    by 0x4E7369E: qsort_r (msort.c:297)
==474==    by 0x401924: compare_hands (eval.c:167)
==474==    by 0x402931: main (test-eval.c:124)
==474==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==474==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==474==    by 0x400FDA: add_card_to (deck-c4.c:29)
==474==    by 0x40309B: hand_from_string (input.c:49)
==474==    by 0x402905: main (test-eval.c:122)
==474== 
==474== Invalid read of size 4
==474==    at 0x401425: card_ptr_comp (eval.c:9)
==474==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==474==    by 0x4E7369E: qsort_r (msort.c:297)
==474==    by 0x401924: compare_hands (eval.c:167)
==474==    by 0x402931: main (test-eval.c:124)
==474==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==474== 
==474== 
==474== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==474==  Access not within mapped region at address 0x0
==474==    at 0x401425: card_ptr_comp (eval.c:9)
==474==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==474==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==474==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==474==    by 0x4E7369E: qsort_r (msort.c:297)
==474==    by 0x401924: compare_hands (eval.c:167)
==474==    by 0x402931: main (test-eval.c:124)
==474==  If you believe this happened as a result of a stack
==474==  overflow in your program's main thread (unlikely but
==474==  possible), you can try to increase the size of the
==474==  main thread stack using the --main-stacksize= flag.
==474==  The main thread stack size used in this run was 8388608.
==474== 
==474== HEAP SUMMARY:
==474==     in use at exit: 864 bytes in 16 blocks
==474==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==474== 
==474== LEAK SUMMARY:
==474==    definitely lost: 0 bytes in 0 blocks
==474==    indirectly lost: 0 bytes in 0 blocks
==474==      possibly lost: 0 bytes in 0 blocks
==474==    still reachable: 864 bytes in 16 blocks
==474==         suppressed: 0 bytes in 0 blocks
==474== Rerun with --leak-check=full to see details of leaked memory
==474== 
==474== For counts of detected and suppressed errors, rerun with: -v
==474== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==479== Memcheck, a memory error detector
==479== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==479== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==479== Command: ./test-eval inp.4.txt
==479== Parent PID: 478
==479== 
==479== Invalid read of size 8
==479==    at 0x40142B: card_ptr_comp (eval.c:9)
==479==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==479==    by 0x4E7369E: qsort_r (msort.c:297)
==479==    by 0x401924: compare_hands (eval.c:167)
==479==    by 0x402931: main (test-eval.c:124)
==479==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==479==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==479==    by 0x400FDA: add_card_to (deck-c4.c:29)
==479==    by 0x40309B: hand_from_string (input.c:49)
==479==    by 0x402905: main (test-eval.c:122)
==479== 
==479== Invalid read of size 4
==479==    at 0x40142E: card_ptr_comp (eval.c:9)
==479==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==479==    by 0x4E7369E: qsort_r (msort.c:297)
==479==    by 0x401924: compare_hands (eval.c:167)
==479==    by 0x402931: main (test-eval.c:124)
==479==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==479== 
==479== 
==479== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==479==  Access not within mapped region at address 0x0
==479==    at 0x40142E: card_ptr_comp (eval.c:9)
==479==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==479==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==479==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==479==    by 0x4E7369E: qsort_r (msort.c:297)
==479==    by 0x401924: compare_hands (eval.c:167)
==479==    by 0x402931: main (test-eval.c:124)
==479==  If you believe this happened as a result of a stack
==479==  overflow in your program's main thread (unlikely but
==479==  possible), you can try to increase the size of the
==479==  main thread stack using the --main-stacksize= flag.
==479==  The main thread stack size used in this run was 8388608.
==479== 
==479== HEAP SUMMARY:
==479==     in use at exit: 896 bytes in 18 blocks
==479==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==479== 
==479== LEAK SUMMARY:
==479==    definitely lost: 0 bytes in 0 blocks
==479==    indirectly lost: 0 bytes in 0 blocks
==479==      possibly lost: 0 bytes in 0 blocks
==479==    still reachable: 896 bytes in 18 blocks
==479==         suppressed: 0 bytes in 0 blocks
==479== Rerun with --leak-check=full to see details of leaked memory
==479== 
==479== For counts of detected and suppressed errors, rerun with: -v
==479== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==484== Memcheck, a memory error detector
==484== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==484== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==484== Command: ./test-eval inp.5.txt
==484== Parent PID: 483
==484== 
==484== Invalid read of size 8
==484==    at 0x401422: card_ptr_comp (eval.c:9)
==484==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==484==    by 0x4E7369E: qsort_r (msort.c:297)
==484==    by 0x401924: compare_hands (eval.c:167)
==484==    by 0x402931: main (test-eval.c:124)
==484==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==484==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==484==    by 0x400FDA: add_card_to (deck-c4.c:29)
==484==    by 0x40309B: hand_from_string (input.c:49)
==484==    by 0x402905: main (test-eval.c:122)
==484== 
==484== Invalid read of size 4
==484==    at 0x401425: card_ptr_comp (eval.c:9)
==484==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==484==    by 0x4E7369E: qsort_r (msort.c:297)
==484==    by 0x401924: compare_hands (eval.c:167)
==484==    by 0x402931: main (test-eval.c:124)
==484==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==484== 
==484== 
==484== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==484==  Access not within mapped region at address 0x0
==484==    at 0x401425: card_ptr_comp (eval.c:9)
==484==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==484==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==484==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==484==    by 0x4E7369E: qsort_r (msort.c:297)
==484==    by 0x401924: compare_hands (eval.c:167)
==484==    by 0x402931: main (test-eval.c:124)
==484==  If you believe this happened as a result of a stack
==484==  overflow in your program's main thread (unlikely but
==484==  possible), you can try to increase the size of the
==484==  main thread stack using the --main-stacksize= flag.
==484==  The main thread stack size used in this run was 8388608.
==484== 
==484== HEAP SUMMARY:
==484==     in use at exit: 864 bytes in 16 blocks
==484==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==484== 
==484== LEAK SUMMARY:
==484==    definitely lost: 0 bytes in 0 blocks
==484==    indirectly lost: 0 bytes in 0 blocks
==484==      possibly lost: 0 bytes in 0 blocks
==484==    still reachable: 864 bytes in 16 blocks
==484==         suppressed: 0 bytes in 0 blocks
==484== Rerun with --leak-check=full to see details of leaked memory
==484== 
==484== For counts of detected and suppressed errors, rerun with: -v
==484== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==489== Memcheck, a memory error detector
==489== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==489== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==489== Command: ./test-eval inp.6.txt
==489== Parent PID: 488
==489== 
==489== Invalid read of size 8
==489==    at 0x40142B: card_ptr_comp (eval.c:9)
==489==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==489==    by 0x4E7369E: qsort_r (msort.c:297)
==489==    by 0x401924: compare_hands (eval.c:167)
==489==    by 0x402931: main (test-eval.c:124)
==489==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==489==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==489==    by 0x400FDA: add_card_to (deck-c4.c:29)
==489==    by 0x40309B: hand_from_string (input.c:49)
==489==    by 0x402905: main (test-eval.c:122)
==489== 
==489== Invalid read of size 4
==489==    at 0x40142E: card_ptr_comp (eval.c:9)
==489==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==489==    by 0x4E7369E: qsort_r (msort.c:297)
==489==    by 0x401924: compare_hands (eval.c:167)
==489==    by 0x402931: main (test-eval.c:124)
==489==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==489== 
==489== 
==489== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==489==  Access not within mapped region at address 0x0
==489==    at 0x40142E: card_ptr_comp (eval.c:9)
==489==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==489==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==489==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==489==    by 0x4E7369E: qsort_r (msort.c:297)
==489==    by 0x401924: compare_hands (eval.c:167)
==489==    by 0x402931: main (test-eval.c:124)
==489==  If you believe this happened as a result of a stack
==489==  overflow in your program's main thread (unlikely but
==489==  possible), you can try to increase the size of the
==489==  main thread stack using the --main-stacksize= flag.
==489==  The main thread stack size used in this run was 8388608.
==489== 
==489== HEAP SUMMARY:
==489==     in use at exit: 896 bytes in 18 blocks
==489==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==489== 
==489== LEAK SUMMARY:
==489==    definitely lost: 0 bytes in 0 blocks
==489==    indirectly lost: 0 bytes in 0 blocks
==489==      possibly lost: 0 bytes in 0 blocks
==489==    still reachable: 896 bytes in 18 blocks
==489==         suppressed: 0 bytes in 0 blocks
==489== Rerun with --leak-check=full to see details of leaked memory
==489== 
==489== For counts of detected and suppressed errors, rerun with: -v
==489== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==494== Memcheck, a memory error detector
==494== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==494== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==494== Command: ./test-eval inp.7.txt
==494== Parent PID: 493
==494== 
==494== Invalid read of size 8
==494==    at 0x40142B: card_ptr_comp (eval.c:9)
==494==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==494==    by 0x4E7369E: qsort_r (msort.c:297)
==494==    by 0x401924: compare_hands (eval.c:167)
==494==    by 0x402931: main (test-eval.c:124)
==494==  Address 0x520cf30 is 0 bytes after a block of size 48 alloc'd
==494==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==494==    by 0x400FDA: add_card_to (deck-c4.c:29)
==494==    by 0x40309B: hand_from_string (input.c:49)
==494==    by 0x402905: main (test-eval.c:122)
==494== 
==494== Invalid read of size 4
==494==    at 0x40142E: card_ptr_comp (eval.c:9)
==494==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==494==    by 0x4E7369E: qsort_r (msort.c:297)
==494==    by 0x401924: compare_hands (eval.c:167)
==494==    by 0x402931: main (test-eval.c:124)
==494==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==494== 
==494== 
==494== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==494==  Access not within mapped region at address 0x0
==494==    at 0x40142E: card_ptr_comp (eval.c:9)
==494==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==494==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==494==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==494==    by 0x4E7369E: qsort_r (msort.c:297)
==494==    by 0x401924: compare_hands (eval.c:167)
==494==    by 0x402931: main (test-eval.c:124)
==494==  If you believe this happened as a result of a stack
==494==  overflow in your program's main thread (unlikely but
==494==  possible), you can try to increase the size of the
==494==  main thread stack using the --main-stacksize= flag.
==494==  The main thread stack size used in this run was 8388608.
==494== 
==494== HEAP SUMMARY:
==494==     in use at exit: 896 bytes in 18 blocks
==494==   total heap usage: 324 allocs, 306 frees, 15,296 bytes allocated
==494== 
==494== LEAK SUMMARY:
==494==    definitely lost: 0 bytes in 0 blocks
==494==    indirectly lost: 0 bytes in 0 blocks
==494==      possibly lost: 0 bytes in 0 blocks
==494==    still reachable: 896 bytes in 18 blocks
==494==         suppressed: 0 bytes in 0 blocks
==494== Rerun with --leak-check=full to see details of leaked memory
==494== 
==494== For counts of detected and suppressed errors, rerun with: -v
==494== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==499== Memcheck, a memory error detector
==499== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==499== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==499== Command: ./test-eval inp.8.txt
==499== Parent PID: 498
==499== 
==499== Invalid read of size 8
==499==    at 0x40142B: card_ptr_comp (eval.c:9)
==499==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==499==    by 0x4E7369E: qsort_r (msort.c:297)
==499==    by 0x401924: compare_hands (eval.c:167)
==499==    by 0x402931: main (test-eval.c:124)
==499==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==499==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==499==    by 0x400FDA: add_card_to (deck-c4.c:29)
==499==    by 0x40309B: hand_from_string (input.c:49)
==499==    by 0x402905: main (test-eval.c:122)
==499== 
==499== Invalid read of size 4
==499==    at 0x40142E: card_ptr_comp (eval.c:9)
==499==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==499==    by 0x4E7369E: qsort_r (msort.c:297)
==499==    by 0x401924: compare_hands (eval.c:167)
==499==    by 0x402931: main (test-eval.c:124)
==499==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==499== 
==499== 
==499== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==499==  Access not within mapped region at address 0x0
==499==    at 0x40142E: card_ptr_comp (eval.c:9)
==499==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==499==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==499==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==499==    by 0x4E7369E: qsort_r (msort.c:297)
==499==    by 0x401924: compare_hands (eval.c:167)
==499==    by 0x402931: main (test-eval.c:124)
==499==  If you believe this happened as a result of a stack
==499==  overflow in your program's main thread (unlikely but
==499==  possible), you can try to increase the size of the
==499==  main thread stack using the --main-stacksize= flag.
==499==  The main thread stack size used in this run was 8388608.
==499== 
==499== HEAP SUMMARY:
==499==     in use at exit: 896 bytes in 18 blocks
==499==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==499== 
==499== LEAK SUMMARY:
==499==    definitely lost: 0 bytes in 0 blocks
==499==    indirectly lost: 0 bytes in 0 blocks
==499==      possibly lost: 0 bytes in 0 blocks
==499==    still reachable: 896 bytes in 18 blocks
==499==         suppressed: 0 bytes in 0 blocks
==499== Rerun with --leak-check=full to see details of leaked memory
==499== 
==499== For counts of detected and suppressed errors, rerun with: -v
==499== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==504== Memcheck, a memory error detector
==504== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==504== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==504== Command: ./test-eval inp.9.txt
==504== Parent PID: 503
==504== 
==504== Invalid read of size 8
==504==    at 0x401422: card_ptr_comp (eval.c:9)
==504==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==504==    by 0x4E7369E: qsort_r (msort.c:297)
==504==    by 0x401924: compare_hands (eval.c:167)
==504==    by 0x402931: main (test-eval.c:124)
==504==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==504==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==504==    by 0x400FDA: add_card_to (deck-c4.c:29)
==504==    by 0x40309B: hand_from_string (input.c:49)
==504==    by 0x402905: main (test-eval.c:122)
==504== 
==504== Invalid read of size 4
==504==    at 0x401425: card_ptr_comp (eval.c:9)
==504==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==504==    by 0x4E7369E: qsort_r (msort.c:297)
==504==    by 0x401924: compare_hands (eval.c:167)
==504==    by 0x402931: main (test-eval.c:124)
==504==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==504== 
==504== 
==504== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==504==  Access not within mapped region at address 0x0
==504==    at 0x401425: card_ptr_comp (eval.c:9)
==504==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==504==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==504==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==504==    by 0x4E7369E: qsort_r (msort.c:297)
==504==    by 0x401924: compare_hands (eval.c:167)
==504==    by 0x402931: main (test-eval.c:124)
==504==  If you believe this happened as a result of a stack
==504==  overflow in your program's main thread (unlikely but
==504==  possible), you can try to increase the size of the
==504==  main thread stack using the --main-stacksize= flag.
==504==  The main thread stack size used in this run was 8388608.
==504== 
==504== HEAP SUMMARY:
==504==     in use at exit: 864 bytes in 16 blocks
==504==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==504== 
==504== LEAK SUMMARY:
==504==    definitely lost: 0 bytes in 0 blocks
==504==    indirectly lost: 0 bytes in 0 blocks
==504==      possibly lost: 0 bytes in 0 blocks
==504==    still reachable: 864 bytes in 16 blocks
==504==         suppressed: 0 bytes in 0 blocks
==504== Rerun with --leak-check=full to see details of leaked memory
==504== 
==504== For counts of detected and suppressed errors, rerun with: -v
==504== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==509== Memcheck, a memory error detector
==509== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==509== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==509== Command: ./test-eval inp.10.txt
==509== Parent PID: 508
==509== 
==509== Invalid read of size 8
==509==    at 0x40142B: card_ptr_comp (eval.c:9)
==509==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==509==    by 0x4E7369E: qsort_r (msort.c:297)
==509==    by 0x401924: compare_hands (eval.c:167)
==509==    by 0x402931: main (test-eval.c:124)
==509==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==509==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==509==    by 0x400FDA: add_card_to (deck-c4.c:29)
==509==    by 0x40309B: hand_from_string (input.c:49)
==509==    by 0x402905: main (test-eval.c:122)
==509== 
==509== Invalid read of size 4
==509==    at 0x40142E: card_ptr_comp (eval.c:9)
==509==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==509==    by 0x4E7369E: qsort_r (msort.c:297)
==509==    by 0x401924: compare_hands (eval.c:167)
==509==    by 0x402931: main (test-eval.c:124)
==509==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==509== 
==509== 
==509== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==509==  Access not within mapped region at address 0x0
==509==    at 0x40142E: card_ptr_comp (eval.c:9)
==509==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==509==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==509==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==509==    by 0x4E7369E: qsort_r (msort.c:297)
==509==    by 0x401924: compare_hands (eval.c:167)
==509==    by 0x402931: main (test-eval.c:124)
==509==  If you believe this happened as a result of a stack
==509==  overflow in your program's main thread (unlikely but
==509==  possible), you can try to increase the size of the
==509==  main thread stack using the --main-stacksize= flag.
==509==  The main thread stack size used in this run was 8388608.
==509== 
==509== HEAP SUMMARY:
==509==     in use at exit: 896 bytes in 18 blocks
==509==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==509== 
==509== LEAK SUMMARY:
==509==    definitely lost: 0 bytes in 0 blocks
==509==    indirectly lost: 0 bytes in 0 blocks
==509==      possibly lost: 0 bytes in 0 blocks
==509==    still reachable: 896 bytes in 18 blocks
==509==         suppressed: 0 bytes in 0 blocks
==509== Rerun with --leak-check=full to see details of leaked memory
==509== 
==509== For counts of detected and suppressed errors, rerun with: -v
==509== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
