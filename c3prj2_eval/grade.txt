Grading at Sun Jan 24 20:28:10 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==2926== Memcheck, a memory error detector
==2926== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2926== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2926== Command: ./test-eval inp.1.txt
==2926== Parent PID: 2925
==2926== 
==2926== Use of uninitialised value of size 8
==2926==    at 0x400C02: print_hand (deck.c:8)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926== 
==2926== Conditional jump or move depends on uninitialised value(s)
==2926==    at 0x402BB9: suit_letter (cards.c:50)
==2926==    by 0x402C07: print_card (cards.c:61)
==2926==    by 0x400C14: print_hand (deck.c:9)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926== 
==2926== Conditional jump or move depends on uninitialised value(s)
==2926==    at 0x402BBE: suit_letter (cards.c:50)
==2926==    by 0x402C07: print_card (cards.c:61)
==2926==    by 0x400C14: print_hand (deck.c:9)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926== 
==2926== Conditional jump or move depends on uninitialised value(s)
==2926==    at 0x402B3B: value_letter (cards.c:28)
==2926==    by 0x402C16: print_card (cards.c:61)
==2926==    by 0x400C14: print_hand (deck.c:9)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926== 
==2926== Invalid read of size 8
==2926==    at 0x400C02: print_hand (deck.c:8)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==2926== 
==2926== 
==2926== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2926==  Access not within mapped region at address 0x400001102
==2926==    at 0x400C02: print_hand (deck.c:8)
==2926==    by 0x402740: describe_hand (test-eval.c:74)
==2926==    by 0x402920: main (test-eval.c:116)
==2926==  If you believe this happened as a result of a stack
==2926==  overflow in your program's main thread (unlikely but
==2926==  possible), you can try to increase the size of the
==2926==  main thread stack using the --main-stacksize= flag.
==2926==  The main thread stack size used in this run was 8388608.
==2926== 
==2926== HEAP SUMMARY:
==2926==     in use at exit: 896 bytes in 18 blocks
==2926==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==2926== 
==2926== LEAK SUMMARY:
==2926==    definitely lost: 0 bytes in 0 blocks
==2926==    indirectly lost: 0 bytes in 0 blocks
==2926==      possibly lost: 0 bytes in 0 blocks
==2926==    still reachable: 896 bytes in 18 blocks
==2926==         suppressed: 0 bytes in 0 blocks
==2926== Rerun with --leak-check=full to see details of leaked memory
==2926== 
==2926== For counts of detected and suppressed errors, rerun with: -v
==2926== Use --track-origins=yes to see where uninitialised values come from
==2926== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==2931== Memcheck, a memory error detector
==2931== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2931== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2931== Command: ./test-eval inp.2.txt
==2931== Parent PID: 2930
==2931== 
==2931== Use of uninitialised value of size 8
==2931==    at 0x400C02: print_hand (deck.c:8)
==2931==    by 0x402740: describe_hand (test-eval.c:74)
==2931==    by 0x402920: main (test-eval.c:116)
==2931== 
==2931== Invalid read of size 8
==2931==    at 0x400C02: print_hand (deck.c:8)
==2931==    by 0x402740: describe_hand (test-eval.c:74)
==2931==    by 0x402920: main (test-eval.c:116)
==2931==  Address 0x5206c70 is 0 bytes inside a block of size 24 free'd
==2931==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2931==    by 0x401F3A: evaluate_hand (eval.c:285)
==2931==    by 0x4026F5: describe_hand (test-eval.c:68)
==2931==    by 0x402920: main (test-eval.c:116)
==2931==  Block was alloc'd at
==2931==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2931==    by 0x401367: get_match_counts (eval-c4.c:70)
==2931==    by 0x401EB8: evaluate_hand (eval.c:280)
==2931==    by 0x4026F5: describe_hand (test-eval.c:68)
==2931==    by 0x402920: main (test-eval.c:116)
==2931== 
==2931== 
==2931== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2931==  Access not within mapped region at address 0x0
==2931==    at 0x400C02: print_hand (deck.c:8)
==2931==    by 0x402740: describe_hand (test-eval.c:74)
==2931==    by 0x402920: main (test-eval.c:116)
==2931==  If you believe this happened as a result of a stack
==2931==  overflow in your program's main thread (unlikely but
==2931==  possible), you can try to increase the size of the
==2931==  main thread stack using the --main-stacksize= flag.
==2931==  The main thread stack size used in this run was 8388608.
==2931== 
==2931== HEAP SUMMARY:
==2931==     in use at exit: 880 bytes in 17 blocks
==2931==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==2931== 
==2931== LEAK SUMMARY:
==2931==    definitely lost: 0 bytes in 0 blocks
==2931==    indirectly lost: 0 bytes in 0 blocks
==2931==      possibly lost: 0 bytes in 0 blocks
==2931==    still reachable: 880 bytes in 17 blocks
==2931==         suppressed: 0 bytes in 0 blocks
==2931== Rerun with --leak-check=full to see details of leaked memory
==2931== 
==2931== For counts of detected and suppressed errors, rerun with: -v
==2931== Use --track-origins=yes to see where uninitialised values come from
==2931== ERROR SUMMARY: 5 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==2948== Memcheck, a memory error detector
==2948== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2948== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2948== Command: ./test-eval inp.4.txt
==2948== Parent PID: 2947
==2948== 
==2948== Use of uninitialised value of size 8
==2948==    at 0x400C02: print_hand (deck.c:8)
==2948==    by 0x402740: describe_hand (test-eval.c:74)
==2948==    by 0x402920: main (test-eval.c:116)
==2948== 
==2948== Invalid read of size 8
==2948==    at 0x400C02: print_hand (deck.c:8)
==2948==    by 0x402740: describe_hand (test-eval.c:74)
==2948==    by 0x402920: main (test-eval.c:116)
==2948==  Address 0x5206d30 is 0 bytes inside a block of size 24 free'd
==2948==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2948==    by 0x401F3A: evaluate_hand (eval.c:285)
==2948==    by 0x4026F5: describe_hand (test-eval.c:68)
==2948==    by 0x402920: main (test-eval.c:116)
==2948==  Block was alloc'd at
==2948==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2948==    by 0x401367: get_match_counts (eval-c4.c:70)
==2948==    by 0x401EB8: evaluate_hand (eval.c:280)
==2948==    by 0x4026F5: describe_hand (test-eval.c:68)
==2948==    by 0x402920: main (test-eval.c:116)
==2948== 
==2948== 
==2948== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2948==  Access not within mapped region at address 0x0
==2948==    at 0x400C02: print_hand (deck.c:8)
==2948==    by 0x402740: describe_hand (test-eval.c:74)
==2948==    by 0x402920: main (test-eval.c:116)
==2948==  If you believe this happened as a result of a stack
==2948==  overflow in your program's main thread (unlikely but
==2948==  possible), you can try to increase the size of the
==2948==  main thread stack using the --main-stacksize= flag.
==2948==  The main thread stack size used in this run was 8388608.
==2948== 
==2948== HEAP SUMMARY:
==2948==     in use at exit: 896 bytes in 18 blocks
==2948==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==2948== 
==2948== LEAK SUMMARY:
==2948==    definitely lost: 0 bytes in 0 blocks
==2948==    indirectly lost: 0 bytes in 0 blocks
==2948==      possibly lost: 0 bytes in 0 blocks
==2948==    still reachable: 896 bytes in 18 blocks
==2948==         suppressed: 0 bytes in 0 blocks
==2948== Rerun with --leak-check=full to see details of leaked memory
==2948== 
==2948== For counts of detected and suppressed errors, rerun with: -v
==2948== Use --track-origins=yes to see where uninitialised values come from
==2948== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==2953== Memcheck, a memory error detector
==2953== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2953== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2953== Command: ./test-eval inp.5.txt
==2953== Parent PID: 2952
==2953== 
==2953== Use of uninitialised value of size 8
==2953==    at 0x400C02: print_hand (deck.c:8)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953== 
==2953== Conditional jump or move depends on uninitialised value(s)
==2953==    at 0x402BB9: suit_letter (cards.c:50)
==2953==    by 0x402C07: print_card (cards.c:61)
==2953==    by 0x400C14: print_hand (deck.c:9)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953== 
==2953== Conditional jump or move depends on uninitialised value(s)
==2953==    at 0x402BBE: suit_letter (cards.c:50)
==2953==    by 0x402C07: print_card (cards.c:61)
==2953==    by 0x400C14: print_hand (deck.c:9)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953== 
==2953== Conditional jump or move depends on uninitialised value(s)
==2953==    at 0x402B3B: value_letter (cards.c:28)
==2953==    by 0x402C16: print_card (cards.c:61)
==2953==    by 0x400C14: print_hand (deck.c:9)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953== 
==2953== Invalid read of size 8
==2953==    at 0x400C02: print_hand (deck.c:8)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==2953== 
==2953== 
==2953== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2953==  Access not within mapped region at address 0x400001102
==2953==    at 0x400C02: print_hand (deck.c:8)
==2953==    by 0x402740: describe_hand (test-eval.c:74)
==2953==    by 0x402920: main (test-eval.c:116)
==2953==  If you believe this happened as a result of a stack
==2953==  overflow in your program's main thread (unlikely but
==2953==  possible), you can try to increase the size of the
==2953==  main thread stack using the --main-stacksize= flag.
==2953==  The main thread stack size used in this run was 8388608.
==2953== 
==2953== HEAP SUMMARY:
==2953==     in use at exit: 864 bytes in 16 blocks
==2953==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==2953== 
==2953== LEAK SUMMARY:
==2953==    definitely lost: 0 bytes in 0 blocks
==2953==    indirectly lost: 0 bytes in 0 blocks
==2953==      possibly lost: 0 bytes in 0 blocks
==2953==    still reachable: 864 bytes in 16 blocks
==2953==         suppressed: 0 bytes in 0 blocks
==2953== Rerun with --leak-check=full to see details of leaked memory
==2953== 
==2953== For counts of detected and suppressed errors, rerun with: -v
==2953== Use --track-origins=yes to see where uninitialised values come from
==2953== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==2958== Memcheck, a memory error detector
==2958== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2958== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2958== Command: ./test-eval inp.6.txt
==2958== Parent PID: 2957
==2958== 
==2958== Use of uninitialised value of size 8
==2958==    at 0x400C02: print_hand (deck.c:8)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958== 
==2958== Conditional jump or move depends on uninitialised value(s)
==2958==    at 0x402BB9: suit_letter (cards.c:50)
==2958==    by 0x402C07: print_card (cards.c:61)
==2958==    by 0x400C14: print_hand (deck.c:9)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958== 
==2958== Conditional jump or move depends on uninitialised value(s)
==2958==    at 0x402BBE: suit_letter (cards.c:50)
==2958==    by 0x402C07: print_card (cards.c:61)
==2958==    by 0x400C14: print_hand (deck.c:9)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958== 
==2958== Conditional jump or move depends on uninitialised value(s)
==2958==    at 0x402B3B: value_letter (cards.c:28)
==2958==    by 0x402C16: print_card (cards.c:61)
==2958==    by 0x400C14: print_hand (deck.c:9)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958== 
==2958== Invalid read of size 8
==2958==    at 0x400C02: print_hand (deck.c:8)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==2958== 
==2958== 
==2958== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2958==  Access not within mapped region at address 0x400001102
==2958==    at 0x400C02: print_hand (deck.c:8)
==2958==    by 0x402740: describe_hand (test-eval.c:74)
==2958==    by 0x402920: main (test-eval.c:116)
==2958==  If you believe this happened as a result of a stack
==2958==  overflow in your program's main thread (unlikely but
==2958==  possible), you can try to increase the size of the
==2958==  main thread stack using the --main-stacksize= flag.
==2958==  The main thread stack size used in this run was 8388608.
==2958== 
==2958== HEAP SUMMARY:
==2958==     in use at exit: 896 bytes in 18 blocks
==2958==   total heap usage: 90 allocs, 72 frees, 10,448 bytes allocated
==2958== 
==2958== LEAK SUMMARY:
==2958==    definitely lost: 0 bytes in 0 blocks
==2958==    indirectly lost: 0 bytes in 0 blocks
==2958==      possibly lost: 0 bytes in 0 blocks
==2958==    still reachable: 896 bytes in 18 blocks
==2958==         suppressed: 0 bytes in 0 blocks
==2958== Rerun with --leak-check=full to see details of leaked memory
==2958== 
==2958== For counts of detected and suppressed errors, rerun with: -v
==2958== Use --track-origins=yes to see where uninitialised values come from
==2958== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==2963== Memcheck, a memory error detector
==2963== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2963== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2963== Command: ./test-eval inp.7.txt
==2963== Parent PID: 2962
==2963== 
==2963== Invalid read of size 8
==2963==    at 0x401472: card_ptr_comp (eval.c:11)
==2963==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2963==    by 0x4E7369E: qsort_r (msort.c:297)
==2963==    by 0x401A0C: compare_hands (eval.c:169)
==2963==    by 0x402995: main (test-eval.c:124)
==2963==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==2963==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==2963==    by 0x400FDD: add_card_to (deck-c4.c:29)
==2963==    by 0x4030FF: hand_from_string (input.c:49)
==2963==    by 0x40297E: main (test-eval.c:123)
==2963== 
==2963== Invalid read of size 4
==2963==    at 0x401475: card_ptr_comp (eval.c:11)
==2963==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2963==    by 0x4E7369E: qsort_r (msort.c:297)
==2963==    by 0x401A0C: compare_hands (eval.c:169)
==2963==    by 0x402995: main (test-eval.c:124)
==2963==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2963== 
==2963== 
==2963== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2963==  Access not within mapped region at address 0x0
==2963==    at 0x401475: card_ptr_comp (eval.c:11)
==2963==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==2963==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==2963==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==2963==    by 0x4E7369E: qsort_r (msort.c:297)
==2963==    by 0x401A0C: compare_hands (eval.c:169)
==2963==    by 0x402995: main (test-eval.c:124)
==2963==  If you believe this happened as a result of a stack
==2963==  overflow in your program's main thread (unlikely but
==2963==  possible), you can try to increase the size of the
==2963==  main thread stack using the --main-stacksize= flag.
==2963==  The main thread stack size used in this run was 8388608.
==2963== 
==2963== HEAP SUMMARY:
==2963==     in use at exit: 912 bytes in 19 blocks
==2963==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==2963== 
==2963== LEAK SUMMARY:
==2963==    definitely lost: 0 bytes in 0 blocks
==2963==    indirectly lost: 0 bytes in 0 blocks
==2963==      possibly lost: 0 bytes in 0 blocks
==2963==    still reachable: 912 bytes in 19 blocks
==2963==         suppressed: 0 bytes in 0 blocks
==2963== Rerun with --leak-check=full to see details of leaked memory
==2963== 
==2963== For counts of detected and suppressed errors, rerun with: -v
==2963== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==2968== Memcheck, a memory error detector
==2968== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2968== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2968== Command: ./test-eval inp.8.txt
==2968== Parent PID: 2967
==2968== 
==2968== Use of uninitialised value of size 8
==2968==    at 0x400C02: print_hand (deck.c:8)
==2968==    by 0x402740: describe_hand (test-eval.c:74)
==2968==    by 0x402920: main (test-eval.c:116)
==2968== 
==2968== Invalid read of size 8
==2968==    at 0x400C02: print_hand (deck.c:8)
==2968==    by 0x402740: describe_hand (test-eval.c:74)
==2968==    by 0x402920: main (test-eval.c:116)
==2968==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2968== 
==2968== 
==2968== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2968==  Access not within mapped region at address 0x0
==2968==    at 0x400C02: print_hand (deck.c:8)
==2968==    by 0x402740: describe_hand (test-eval.c:74)
==2968==    by 0x402920: main (test-eval.c:116)
==2968==  If you believe this happened as a result of a stack
==2968==  overflow in your program's main thread (unlikely but
==2968==  possible), you can try to increase the size of the
==2968==  main thread stack using the --main-stacksize= flag.
==2968==  The main thread stack size used in this run was 8388608.
==2968== 
==2968== HEAP SUMMARY:
==2968==     in use at exit: 896 bytes in 18 blocks
==2968==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==2968== 
==2968== LEAK SUMMARY:
==2968==    definitely lost: 0 bytes in 0 blocks
==2968==    indirectly lost: 0 bytes in 0 blocks
==2968==      possibly lost: 0 bytes in 0 blocks
==2968==    still reachable: 896 bytes in 18 blocks
==2968==         suppressed: 0 bytes in 0 blocks
==2968== Rerun with --leak-check=full to see details of leaked memory
==2968== 
==2968== For counts of detected and suppressed errors, rerun with: -v
==2968== Use --track-origins=yes to see where uninitialised values come from
==2968== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==2973== Memcheck, a memory error detector
==2973== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2973== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2973== Command: ./test-eval inp.9.txt
==2973== Parent PID: 2972
==2973== 
==2973== Use of uninitialised value of size 8
==2973==    at 0x400C02: print_hand (deck.c:8)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973== 
==2973== Conditional jump or move depends on uninitialised value(s)
==2973==    at 0x402BB9: suit_letter (cards.c:50)
==2973==    by 0x402C07: print_card (cards.c:61)
==2973==    by 0x400C14: print_hand (deck.c:9)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973== 
==2973== Conditional jump or move depends on uninitialised value(s)
==2973==    at 0x402BBE: suit_letter (cards.c:50)
==2973==    by 0x402C07: print_card (cards.c:61)
==2973==    by 0x400C14: print_hand (deck.c:9)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973== 
==2973== Conditional jump or move depends on uninitialised value(s)
==2973==    at 0x402B3B: value_letter (cards.c:28)
==2973==    by 0x402C16: print_card (cards.c:61)
==2973==    by 0x400C14: print_hand (deck.c:9)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973== 
==2973== Invalid read of size 8
==2973==    at 0x400C02: print_hand (deck.c:8)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==2973== 
==2973== 
==2973== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2973==  Access not within mapped region at address 0x400001102
==2973==    at 0x400C02: print_hand (deck.c:8)
==2973==    by 0x402740: describe_hand (test-eval.c:74)
==2973==    by 0x402920: main (test-eval.c:116)
==2973==  If you believe this happened as a result of a stack
==2973==  overflow in your program's main thread (unlikely but
==2973==  possible), you can try to increase the size of the
==2973==  main thread stack using the --main-stacksize= flag.
==2973==  The main thread stack size used in this run was 8388608.
==2973== 
==2973== HEAP SUMMARY:
==2973==     in use at exit: 928 bytes in 20 blocks
==2973==   total heap usage: 86 allocs, 66 frees, 10,336 bytes allocated
==2973== 
==2973== LEAK SUMMARY:
==2973==    definitely lost: 0 bytes in 0 blocks
==2973==    indirectly lost: 0 bytes in 0 blocks
==2973==      possibly lost: 0 bytes in 0 blocks
==2973==    still reachable: 928 bytes in 20 blocks
==2973==         suppressed: 0 bytes in 0 blocks
==2973== Rerun with --leak-check=full to see details of leaked memory
==2973== 
==2973== For counts of detected and suppressed errors, rerun with: -v
==2973== Use --track-origins=yes to see where uninitialised values come from
==2973== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==2978== Memcheck, a memory error detector
==2978== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2978== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2978== Command: ./test-eval inp.10.txt
==2978== Parent PID: 2977
==2978== 
==2978== Use of uninitialised value of size 8
==2978==    at 0x400C02: print_hand (deck.c:8)
==2978==    by 0x402740: describe_hand (test-eval.c:74)
==2978==    by 0x402940: main (test-eval.c:119)
==2978== 
==2978== Invalid read of size 8
==2978==    at 0x400C02: print_hand (deck.c:8)
==2978==    by 0x402740: describe_hand (test-eval.c:74)
==2978==    by 0x402940: main (test-eval.c:119)
==2978==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2978== 
==2978== 
==2978== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2978==  Access not within mapped region at address 0x0
==2978==    at 0x400C02: print_hand (deck.c:8)
==2978==    by 0x402740: describe_hand (test-eval.c:74)
==2978==    by 0x402940: main (test-eval.c:119)
==2978==  If you believe this happened as a result of a stack
==2978==  overflow in your program's main thread (unlikely but
==2978==  possible), you can try to increase the size of the
==2978==  main thread stack using the --main-stacksize= flag.
==2978==  The main thread stack size used in this run was 8388608.
==2978== 
==2978== HEAP SUMMARY:
==2978==     in use at exit: 896 bytes in 18 blocks
==2978==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==2978== 
==2978== LEAK SUMMARY:
==2978==    definitely lost: 0 bytes in 0 blocks
==2978==    indirectly lost: 0 bytes in 0 blocks
==2978==      possibly lost: 0 bytes in 0 blocks
==2978==    still reachable: 896 bytes in 18 blocks
==2978==         suppressed: 0 bytes in 0 blocks
==2978== Rerun with --leak-check=full to see details of leaked memory
==2978== 
==2978== For counts of detected and suppressed errors, rerun with: -v
==2978== Use --track-origins=yes to see where uninitialised values come from
==2978== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
