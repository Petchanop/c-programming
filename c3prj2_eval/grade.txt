Grading at Sun Jan 24 21:16:34 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==4285== Memcheck, a memory error detector
==4285== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4285== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4285== Command: ./test-eval inp.1.txt
==4285== Parent PID: 4284
==4285== 
==4285== Use of uninitialised value of size 8
==4285==    at 0x400C01: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285== 
==4285== Conditional jump or move depends on uninitialised value(s)
==4285==    at 0x402B90: suit_letter (cards.c:50)
==4285==    by 0x402BDE: print_card (cards.c:61)
==4285==    by 0x400C08: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285== 
==4285== Conditional jump or move depends on uninitialised value(s)
==4285==    at 0x402B95: suit_letter (cards.c:50)
==4285==    by 0x402BDE: print_card (cards.c:61)
==4285==    by 0x400C08: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285== 
==4285== Conditional jump or move depends on uninitialised value(s)
==4285==    at 0x402B12: value_letter (cards.c:28)
==4285==    by 0x402BED: print_card (cards.c:61)
==4285==    by 0x400C08: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285== 
==4285== Invalid read of size 8
==4285==    at 0x400C01: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==4285== 
==4285== 
==4285== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4285==  Access not within mapped region at address 0x400001102
==4285==    at 0x400C01: print_hand (deck.c:9)
==4285==    by 0x402717: describe_hand (test-eval.c:74)
==4285==    by 0x4028F7: main (test-eval.c:116)
==4285==  If you believe this happened as a result of a stack
==4285==  overflow in your program's main thread (unlikely but
==4285==  possible), you can try to increase the size of the
==4285==  main thread stack using the --main-stacksize= flag.
==4285==  The main thread stack size used in this run was 8388608.
==4285== 
==4285== HEAP SUMMARY:
==4285==     in use at exit: 896 bytes in 18 blocks
==4285==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==4285== 
==4285== LEAK SUMMARY:
==4285==    definitely lost: 0 bytes in 0 blocks
==4285==    indirectly lost: 0 bytes in 0 blocks
==4285==      possibly lost: 0 bytes in 0 blocks
==4285==    still reachable: 896 bytes in 18 blocks
==4285==         suppressed: 0 bytes in 0 blocks
==4285== Rerun with --leak-check=full to see details of leaked memory
==4285== 
==4285== For counts of detected and suppressed errors, rerun with: -v
==4285== Use --track-origins=yes to see where uninitialised values come from
==4285== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==4290== Memcheck, a memory error detector
==4290== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4290== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4290== Command: ./test-eval inp.2.txt
==4290== Parent PID: 4289
==4290== 
==4290== Use of uninitialised value of size 8
==4290==    at 0x400C01: print_hand (deck.c:9)
==4290==    by 0x402717: describe_hand (test-eval.c:74)
==4290==    by 0x4028F7: main (test-eval.c:116)
==4290== 
==4290== Invalid read of size 8
==4290==    at 0x400C01: print_hand (deck.c:9)
==4290==    by 0x402717: describe_hand (test-eval.c:74)
==4290==    by 0x4028F7: main (test-eval.c:116)
==4290==  Address 0x5206c70 is 0 bytes inside a block of size 24 free'd
==4290==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4290==    by 0x401F11: evaluate_hand (eval.c:287)
==4290==    by 0x4026CC: describe_hand (test-eval.c:68)
==4290==    by 0x4028F7: main (test-eval.c:116)
==4290==  Block was alloc'd at
==4290==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4290==    by 0x401357: get_match_counts (eval-c4.c:70)
==4290==    by 0x401E8F: evaluate_hand (eval.c:282)
==4290==    by 0x4026CC: describe_hand (test-eval.c:68)
==4290==    by 0x4028F7: main (test-eval.c:116)
==4290== 
==4290== 
==4290== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4290==  Access not within mapped region at address 0x0
==4290==    at 0x400C01: print_hand (deck.c:9)
==4290==    by 0x402717: describe_hand (test-eval.c:74)
==4290==    by 0x4028F7: main (test-eval.c:116)
==4290==  If you believe this happened as a result of a stack
==4290==  overflow in your program's main thread (unlikely but
==4290==  possible), you can try to increase the size of the
==4290==  main thread stack using the --main-stacksize= flag.
==4290==  The main thread stack size used in this run was 8388608.
==4290== 
==4290== HEAP SUMMARY:
==4290==     in use at exit: 880 bytes in 17 blocks
==4290==   total heap usage: 30 allocs, 13 frees, 9,320 bytes allocated
==4290== 
==4290== LEAK SUMMARY:
==4290==    definitely lost: 0 bytes in 0 blocks
==4290==    indirectly lost: 0 bytes in 0 blocks
==4290==      possibly lost: 0 bytes in 0 blocks
==4290==    still reachable: 880 bytes in 17 blocks
==4290==         suppressed: 0 bytes in 0 blocks
==4290== Rerun with --leak-check=full to see details of leaked memory
==4290== 
==4290== For counts of detected and suppressed errors, rerun with: -v
==4290== Use --track-origins=yes to see where uninitialised values come from
==4290== ERROR SUMMARY: 5 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==4307== Memcheck, a memory error detector
==4307== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4307== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4307== Command: ./test-eval inp.4.txt
==4307== Parent PID: 4306
==4307== 
==4307== Use of uninitialised value of size 8
==4307==    at 0x400C01: print_hand (deck.c:9)
==4307==    by 0x402717: describe_hand (test-eval.c:74)
==4307==    by 0x4028F7: main (test-eval.c:116)
==4307== 
==4307== Invalid read of size 8
==4307==    at 0x400C01: print_hand (deck.c:9)
==4307==    by 0x402717: describe_hand (test-eval.c:74)
==4307==    by 0x4028F7: main (test-eval.c:116)
==4307==  Address 0x5206d30 is 0 bytes inside a block of size 24 free'd
==4307==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4307==    by 0x401F11: evaluate_hand (eval.c:287)
==4307==    by 0x4026CC: describe_hand (test-eval.c:68)
==4307==    by 0x4028F7: main (test-eval.c:116)
==4307==  Block was alloc'd at
==4307==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4307==    by 0x401357: get_match_counts (eval-c4.c:70)
==4307==    by 0x401E8F: evaluate_hand (eval.c:282)
==4307==    by 0x4026CC: describe_hand (test-eval.c:68)
==4307==    by 0x4028F7: main (test-eval.c:116)
==4307== 
==4307== 
==4307== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4307==  Access not within mapped region at address 0x0
==4307==    at 0x400C01: print_hand (deck.c:9)
==4307==    by 0x402717: describe_hand (test-eval.c:74)
==4307==    by 0x4028F7: main (test-eval.c:116)
==4307==  If you believe this happened as a result of a stack
==4307==  overflow in your program's main thread (unlikely but
==4307==  possible), you can try to increase the size of the
==4307==  main thread stack using the --main-stacksize= flag.
==4307==  The main thread stack size used in this run was 8388608.
==4307== 
==4307== HEAP SUMMARY:
==4307==     in use at exit: 896 bytes in 18 blocks
==4307==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==4307== 
==4307== LEAK SUMMARY:
==4307==    definitely lost: 0 bytes in 0 blocks
==4307==    indirectly lost: 0 bytes in 0 blocks
==4307==      possibly lost: 0 bytes in 0 blocks
==4307==    still reachable: 896 bytes in 18 blocks
==4307==         suppressed: 0 bytes in 0 blocks
==4307== Rerun with --leak-check=full to see details of leaked memory
==4307== 
==4307== For counts of detected and suppressed errors, rerun with: -v
==4307== Use --track-origins=yes to see where uninitialised values come from
==4307== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==4312== Memcheck, a memory error detector
==4312== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4312== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4312== Command: ./test-eval inp.5.txt
==4312== Parent PID: 4311
==4312== 
==4312== Use of uninitialised value of size 8
==4312==    at 0x400C01: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312== 
==4312== Conditional jump or move depends on uninitialised value(s)
==4312==    at 0x402B90: suit_letter (cards.c:50)
==4312==    by 0x402BDE: print_card (cards.c:61)
==4312==    by 0x400C08: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312== 
==4312== Conditional jump or move depends on uninitialised value(s)
==4312==    at 0x402B95: suit_letter (cards.c:50)
==4312==    by 0x402BDE: print_card (cards.c:61)
==4312==    by 0x400C08: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312== 
==4312== Conditional jump or move depends on uninitialised value(s)
==4312==    at 0x402B12: value_letter (cards.c:28)
==4312==    by 0x402BED: print_card (cards.c:61)
==4312==    by 0x400C08: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312== 
==4312== Invalid read of size 8
==4312==    at 0x400C01: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==4312== 
==4312== 
==4312== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4312==  Access not within mapped region at address 0x400001102
==4312==    at 0x400C01: print_hand (deck.c:9)
==4312==    by 0x402717: describe_hand (test-eval.c:74)
==4312==    by 0x4028F7: main (test-eval.c:116)
==4312==  If you believe this happened as a result of a stack
==4312==  overflow in your program's main thread (unlikely but
==4312==  possible), you can try to increase the size of the
==4312==  main thread stack using the --main-stacksize= flag.
==4312==  The main thread stack size used in this run was 8388608.
==4312== 
==4312== HEAP SUMMARY:
==4312==     in use at exit: 864 bytes in 16 blocks
==4312==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==4312== 
==4312== LEAK SUMMARY:
==4312==    definitely lost: 0 bytes in 0 blocks
==4312==    indirectly lost: 0 bytes in 0 blocks
==4312==      possibly lost: 0 bytes in 0 blocks
==4312==    still reachable: 864 bytes in 16 blocks
==4312==         suppressed: 0 bytes in 0 blocks
==4312== Rerun with --leak-check=full to see details of leaked memory
==4312== 
==4312== For counts of detected and suppressed errors, rerun with: -v
==4312== Use --track-origins=yes to see where uninitialised values come from
==4312== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==4317== Memcheck, a memory error detector
==4317== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4317== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4317== Command: ./test-eval inp.6.txt
==4317== Parent PID: 4316
==4317== 
==4317== Use of uninitialised value of size 8
==4317==    at 0x400C01: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317== 
==4317== Conditional jump or move depends on uninitialised value(s)
==4317==    at 0x402B90: suit_letter (cards.c:50)
==4317==    by 0x402BDE: print_card (cards.c:61)
==4317==    by 0x400C08: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317== 
==4317== Conditional jump or move depends on uninitialised value(s)
==4317==    at 0x402B95: suit_letter (cards.c:50)
==4317==    by 0x402BDE: print_card (cards.c:61)
==4317==    by 0x400C08: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317== 
==4317== Conditional jump or move depends on uninitialised value(s)
==4317==    at 0x402B12: value_letter (cards.c:28)
==4317==    by 0x402BED: print_card (cards.c:61)
==4317==    by 0x400C08: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317== 
==4317== Invalid read of size 8
==4317==    at 0x400C01: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==4317== 
==4317== 
==4317== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4317==  Access not within mapped region at address 0x400001102
==4317==    at 0x400C01: print_hand (deck.c:9)
==4317==    by 0x402717: describe_hand (test-eval.c:74)
==4317==    by 0x4028F7: main (test-eval.c:116)
==4317==  If you believe this happened as a result of a stack
==4317==  overflow in your program's main thread (unlikely but
==4317==  possible), you can try to increase the size of the
==4317==  main thread stack using the --main-stacksize= flag.
==4317==  The main thread stack size used in this run was 8388608.
==4317== 
==4317== HEAP SUMMARY:
==4317==     in use at exit: 896 bytes in 18 blocks
==4317==   total heap usage: 90 allocs, 72 frees, 10,448 bytes allocated
==4317== 
==4317== LEAK SUMMARY:
==4317==    definitely lost: 0 bytes in 0 blocks
==4317==    indirectly lost: 0 bytes in 0 blocks
==4317==      possibly lost: 0 bytes in 0 blocks
==4317==    still reachable: 896 bytes in 18 blocks
==4317==         suppressed: 0 bytes in 0 blocks
==4317== Rerun with --leak-check=full to see details of leaked memory
==4317== 
==4317== For counts of detected and suppressed errors, rerun with: -v
==4317== Use --track-origins=yes to see where uninitialised values come from
==4317== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==4322== Memcheck, a memory error detector
==4322== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4322== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4322== Command: ./test-eval inp.7.txt
==4322== Parent PID: 4321
==4322== 
==4322== Invalid read of size 8
==4322==    at 0x401462: card_ptr_comp (eval.c:11)
==4322==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==4322==    by 0x4E7369E: qsort_r (msort.c:297)
==4322==    by 0x4019E3: compare_hands (eval.c:171)
==4322==    by 0x40296C: main (test-eval.c:124)
==4322==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==4322==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==4322==    by 0x400FCD: add_card_to (deck-c4.c:29)
==4322==    by 0x4030D6: hand_from_string (input.c:49)
==4322==    by 0x402955: main (test-eval.c:123)
==4322== 
==4322== Invalid read of size 4
==4322==    at 0x401465: card_ptr_comp (eval.c:11)
==4322==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==4322==    by 0x4E7369E: qsort_r (msort.c:297)
==4322==    by 0x4019E3: compare_hands (eval.c:171)
==4322==    by 0x40296C: main (test-eval.c:124)
==4322==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4322== 
==4322== 
==4322== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4322==  Access not within mapped region at address 0x0
==4322==    at 0x401465: card_ptr_comp (eval.c:11)
==4322==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==4322==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==4322==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==4322==    by 0x4E7369E: qsort_r (msort.c:297)
==4322==    by 0x4019E3: compare_hands (eval.c:171)
==4322==    by 0x40296C: main (test-eval.c:124)
==4322==  If you believe this happened as a result of a stack
==4322==  overflow in your program's main thread (unlikely but
==4322==  possible), you can try to increase the size of the
==4322==  main thread stack using the --main-stacksize= flag.
==4322==  The main thread stack size used in this run was 8388608.
==4322== 
==4322== HEAP SUMMARY:
==4322==     in use at exit: 912 bytes in 19 blocks
==4322==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==4322== 
==4322== LEAK SUMMARY:
==4322==    definitely lost: 0 bytes in 0 blocks
==4322==    indirectly lost: 0 bytes in 0 blocks
==4322==      possibly lost: 0 bytes in 0 blocks
==4322==    still reachable: 912 bytes in 19 blocks
==4322==         suppressed: 0 bytes in 0 blocks
==4322== Rerun with --leak-check=full to see details of leaked memory
==4322== 
==4322== For counts of detected and suppressed errors, rerun with: -v
==4322== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==4327== Memcheck, a memory error detector
==4327== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4327== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4327== Command: ./test-eval inp.8.txt
==4327== Parent PID: 4326
==4327== 
==4327== Use of uninitialised value of size 8
==4327==    at 0x400C01: print_hand (deck.c:9)
==4327==    by 0x402717: describe_hand (test-eval.c:74)
==4327==    by 0x4028F7: main (test-eval.c:116)
==4327== 
==4327== Invalid read of size 8
==4327==    at 0x400C01: print_hand (deck.c:9)
==4327==    by 0x402717: describe_hand (test-eval.c:74)
==4327==    by 0x4028F7: main (test-eval.c:116)
==4327==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4327== 
==4327== 
==4327== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4327==  Access not within mapped region at address 0x0
==4327==    at 0x400C01: print_hand (deck.c:9)
==4327==    by 0x402717: describe_hand (test-eval.c:74)
==4327==    by 0x4028F7: main (test-eval.c:116)
==4327==  If you believe this happened as a result of a stack
==4327==  overflow in your program's main thread (unlikely but
==4327==  possible), you can try to increase the size of the
==4327==  main thread stack using the --main-stacksize= flag.
==4327==  The main thread stack size used in this run was 8388608.
==4327== 
==4327== HEAP SUMMARY:
==4327==     in use at exit: 896 bytes in 18 blocks
==4327==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==4327== 
==4327== LEAK SUMMARY:
==4327==    definitely lost: 0 bytes in 0 blocks
==4327==    indirectly lost: 0 bytes in 0 blocks
==4327==      possibly lost: 0 bytes in 0 blocks
==4327==    still reachable: 896 bytes in 18 blocks
==4327==         suppressed: 0 bytes in 0 blocks
==4327== Rerun with --leak-check=full to see details of leaked memory
==4327== 
==4327== For counts of detected and suppressed errors, rerun with: -v
==4327== Use --track-origins=yes to see where uninitialised values come from
==4327== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==4332== Memcheck, a memory error detector
==4332== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4332== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4332== Command: ./test-eval inp.9.txt
==4332== Parent PID: 4331
==4332== 
==4332== Use of uninitialised value of size 8
==4332==    at 0x400C01: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332== 
==4332== Conditional jump or move depends on uninitialised value(s)
==4332==    at 0x402B90: suit_letter (cards.c:50)
==4332==    by 0x402BDE: print_card (cards.c:61)
==4332==    by 0x400C08: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332== 
==4332== Conditional jump or move depends on uninitialised value(s)
==4332==    at 0x402B95: suit_letter (cards.c:50)
==4332==    by 0x402BDE: print_card (cards.c:61)
==4332==    by 0x400C08: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332== 
==4332== Conditional jump or move depends on uninitialised value(s)
==4332==    at 0x402B12: value_letter (cards.c:28)
==4332==    by 0x402BED: print_card (cards.c:61)
==4332==    by 0x400C08: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332== 
==4332== Invalid read of size 8
==4332==    at 0x400C01: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==4332== 
==4332== 
==4332== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4332==  Access not within mapped region at address 0x400001102
==4332==    at 0x400C01: print_hand (deck.c:9)
==4332==    by 0x402717: describe_hand (test-eval.c:74)
==4332==    by 0x4028F7: main (test-eval.c:116)
==4332==  If you believe this happened as a result of a stack
==4332==  overflow in your program's main thread (unlikely but
==4332==  possible), you can try to increase the size of the
==4332==  main thread stack using the --main-stacksize= flag.
==4332==  The main thread stack size used in this run was 8388608.
==4332== 
==4332== HEAP SUMMARY:
==4332==     in use at exit: 928 bytes in 20 blocks
==4332==   total heap usage: 86 allocs, 66 frees, 10,336 bytes allocated
==4332== 
==4332== LEAK SUMMARY:
==4332==    definitely lost: 0 bytes in 0 blocks
==4332==    indirectly lost: 0 bytes in 0 blocks
==4332==      possibly lost: 0 bytes in 0 blocks
==4332==    still reachable: 928 bytes in 20 blocks
==4332==         suppressed: 0 bytes in 0 blocks
==4332== Rerun with --leak-check=full to see details of leaked memory
==4332== 
==4332== For counts of detected and suppressed errors, rerun with: -v
==4332== Use --track-origins=yes to see where uninitialised values come from
==4332== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==4337== Memcheck, a memory error detector
==4337== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4337== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4337== Command: ./test-eval inp.10.txt
==4337== Parent PID: 4336
==4337== 
==4337== Use of uninitialised value of size 8
==4337==    at 0x400C01: print_hand (deck.c:9)
==4337==    by 0x402717: describe_hand (test-eval.c:74)
==4337==    by 0x402917: main (test-eval.c:119)
==4337== 
==4337== Invalid read of size 8
==4337==    at 0x400C01: print_hand (deck.c:9)
==4337==    by 0x402717: describe_hand (test-eval.c:74)
==4337==    by 0x402917: main (test-eval.c:119)
==4337==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4337== 
==4337== 
==4337== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==4337==  Access not within mapped region at address 0x0
==4337==    at 0x400C01: print_hand (deck.c:9)
==4337==    by 0x402717: describe_hand (test-eval.c:74)
==4337==    by 0x402917: main (test-eval.c:119)
==4337==  If you believe this happened as a result of a stack
==4337==  overflow in your program's main thread (unlikely but
==4337==  possible), you can try to increase the size of the
==4337==  main thread stack using the --main-stacksize= flag.
==4337==  The main thread stack size used in this run was 8388608.
==4337== 
==4337== HEAP SUMMARY:
==4337==     in use at exit: 896 bytes in 18 blocks
==4337==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==4337== 
==4337== LEAK SUMMARY:
==4337==    definitely lost: 0 bytes in 0 blocks
==4337==    indirectly lost: 0 bytes in 0 blocks
==4337==      possibly lost: 0 bytes in 0 blocks
==4337==    still reachable: 896 bytes in 18 blocks
==4337==         suppressed: 0 bytes in 0 blocks
==4337== Rerun with --leak-check=full to see details of leaked memory
==4337== 
==4337== For counts of detected and suppressed errors, rerun with: -v
==4337== Use --track-origins=yes to see where uninitialised values come from
==4337== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
