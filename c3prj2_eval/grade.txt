Grading at Sun Jan 24 20:03:46 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==1761== Memcheck, a memory error detector
==1761== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1761== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1761== Command: ./test-eval inp.1.txt
==1761== Parent PID: 1760
==1761== 
==1761== Use of uninitialised value of size 8
==1761==    at 0x400C02: print_hand (deck.c:8)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761== 
==1761== Conditional jump or move depends on uninitialised value(s)
==1761==    at 0x402B71: suit_letter (cards.c:50)
==1761==    by 0x402BBF: print_card (cards.c:61)
==1761==    by 0x400C14: print_hand (deck.c:9)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761== 
==1761== Conditional jump or move depends on uninitialised value(s)
==1761==    at 0x402B76: suit_letter (cards.c:50)
==1761==    by 0x402BBF: print_card (cards.c:61)
==1761==    by 0x400C14: print_hand (deck.c:9)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761== 
==1761== Conditional jump or move depends on uninitialised value(s)
==1761==    at 0x402AF3: value_letter (cards.c:28)
==1761==    by 0x402BCE: print_card (cards.c:61)
==1761==    by 0x400C14: print_hand (deck.c:9)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761== 
==1761== Invalid read of size 8
==1761==    at 0x400C02: print_hand (deck.c:8)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1761== 
==1761== 
==1761== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1761==  Access not within mapped region at address 0x400001102
==1761==    at 0x400C02: print_hand (deck.c:8)
==1761==    by 0x4026F8: describe_hand (test-eval.c:74)
==1761==    by 0x4028D8: main (test-eval.c:116)
==1761==  If you believe this happened as a result of a stack
==1761==  overflow in your program's main thread (unlikely but
==1761==  possible), you can try to increase the size of the
==1761==  main thread stack using the --main-stacksize= flag.
==1761==  The main thread stack size used in this run was 8388608.
==1761== 
==1761== HEAP SUMMARY:
==1761==     in use at exit: 896 bytes in 18 blocks
==1761==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1761== 
==1761== LEAK SUMMARY:
==1761==    definitely lost: 0 bytes in 0 blocks
==1761==    indirectly lost: 0 bytes in 0 blocks
==1761==      possibly lost: 0 bytes in 0 blocks
==1761==    still reachable: 896 bytes in 18 blocks
==1761==         suppressed: 0 bytes in 0 blocks
==1761== Rerun with --leak-check=full to see details of leaked memory
==1761== 
==1761== For counts of detected and suppressed errors, rerun with: -v
==1761== Use --track-origins=yes to see where uninitialised values come from
==1761== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1766== Memcheck, a memory error detector
==1766== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1766== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1766== Command: ./test-eval inp.2.txt
==1766== Parent PID: 1765
==1766== 
==1766== Use of uninitialised value of size 8
==1766==    at 0x400C02: print_hand (deck.c:8)
==1766==    by 0x4026F8: describe_hand (test-eval.c:74)
==1766==    by 0x4028D8: main (test-eval.c:116)
==1766== 
==1766== Invalid read of size 8
==1766==    at 0x400C02: print_hand (deck.c:8)
==1766==    by 0x4026F8: describe_hand (test-eval.c:74)
==1766==    by 0x4028D8: main (test-eval.c:116)
==1766==  Address 0x5206c70 is 0 bytes inside a block of size 24 free'd
==1766==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1766==    by 0x401EF2: evaluate_hand (eval.c:285)
==1766==    by 0x4026AD: describe_hand (test-eval.c:68)
==1766==    by 0x4028D8: main (test-eval.c:116)
==1766==  Block was alloc'd at
==1766==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1766==    by 0x401367: get_match_counts (eval-c4.c:70)
==1766==    by 0x401E70: evaluate_hand (eval.c:280)
==1766==    by 0x4026AD: describe_hand (test-eval.c:68)
==1766==    by 0x4028D8: main (test-eval.c:116)
==1766== 
==1766== Use of uninitialised value of size 8
==1766==    at 0x400C02: print_hand (deck.c:8)
==1766==    by 0x4026F8: describe_hand (test-eval.c:74)
==1766==    by 0x4028F8: main (test-eval.c:119)
==1766== 
==1766== Invalid read of size 8
==1766==    at 0x400C02: print_hand (deck.c:8)
==1766==    by 0x4026F8: describe_hand (test-eval.c:74)
==1766==    by 0x4028F8: main (test-eval.c:119)
==1766==  Address 0x5206d30 is 0 bytes inside a block of size 20 free'd
==1766==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1766==    by 0x401EF2: evaluate_hand (eval.c:285)
==1766==    by 0x4026AD: describe_hand (test-eval.c:68)
==1766==    by 0x4028F8: main (test-eval.c:119)
==1766==  Block was alloc'd at
==1766==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1766==    by 0x401367: get_match_counts (eval-c4.c:70)
==1766==    by 0x401E70: evaluate_hand (eval.c:280)
==1766==    by 0x4026AD: describe_hand (test-eval.c:68)
==1766==    by 0x4028F8: main (test-eval.c:119)
==1766== 
==1766== Invalid read of size 8
==1766==    at 0x401472: card_ptr_comp (eval.c:11)
==1766==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1766==    by 0x4E7369E: qsort_r (msort.c:297)
==1766==    by 0x4019C4: compare_hands (eval.c:169)
==1766==    by 0x40294D: main (test-eval.c:124)
==1766==  Address 0x5207518 is 0 bytes after a block of size 40 alloc'd
==1766==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1766==    by 0x400FDD: add_card_to (deck-c4.c:29)
==1766==    by 0x4030B7: hand_from_string (input.c:49)
==1766==    by 0x402936: main (test-eval.c:123)
==1766== 
==1766== Invalid read of size 4
==1766==    at 0x401475: card_ptr_comp (eval.c:11)
==1766==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1766==    by 0x4E7369E: qsort_r (msort.c:297)
==1766==    by 0x4019C4: compare_hands (eval.c:169)
==1766==    by 0x40294D: main (test-eval.c:124)
==1766==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1766== 
==1766== 
==1766== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1766==  Access not within mapped region at address 0x0
==1766==    at 0x401475: card_ptr_comp (eval.c:11)
==1766==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1766==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1766==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1766==    by 0x4E7369E: qsort_r (msort.c:297)
==1766==    by 0x4019C4: compare_hands (eval.c:169)
==1766==    by 0x40294D: main (test-eval.c:124)
==1766==  If you believe this happened as a result of a stack
==1766==  overflow in your program's main thread (unlikely but
==1766==  possible), you can try to increase the size of the
==1766==  main thread stack using the --main-stacksize= flag.
==1766==  The main thread stack size used in this run was 8388608.
==1766== 
==1766== HEAP SUMMARY:
==1766==     in use at exit: 880 bytes in 17 blocks
==1766==   total heap usage: 56 allocs, 39 frees, 9,768 bytes allocated
==1766== 
==1766== LEAK SUMMARY:
==1766==    definitely lost: 0 bytes in 0 blocks
==1766==    indirectly lost: 0 bytes in 0 blocks
==1766==      possibly lost: 0 bytes in 0 blocks
==1766==    still reachable: 880 bytes in 17 blocks
==1766==         suppressed: 0 bytes in 0 blocks
==1766== Rerun with --leak-check=full to see details of leaked memory
==1766== 
==1766== For counts of detected and suppressed errors, rerun with: -v
==1766== Use --track-origins=yes to see where uninitialised values come from
==1766== ERROR SUMMARY: 8 errors from 6 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1783== Memcheck, a memory error detector
==1783== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1783== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1783== Command: ./test-eval inp.4.txt
==1783== Parent PID: 1782
==1783== 
==1783== Use of uninitialised value of size 8
==1783==    at 0x400C02: print_hand (deck.c:8)
==1783==    by 0x4026F8: describe_hand (test-eval.c:74)
==1783==    by 0x4028D8: main (test-eval.c:116)
==1783== 
==1783== Invalid read of size 8
==1783==    at 0x400C02: print_hand (deck.c:8)
==1783==    by 0x4026F8: describe_hand (test-eval.c:74)
==1783==    by 0x4028D8: main (test-eval.c:116)
==1783==  Address 0x5206d30 is 0 bytes inside a block of size 24 free'd
==1783==    at 0x4C2EDEB: free (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1783==    by 0x401EF2: evaluate_hand (eval.c:285)
==1783==    by 0x4026AD: describe_hand (test-eval.c:68)
==1783==    by 0x4028D8: main (test-eval.c:116)
==1783==  Block was alloc'd at
==1783==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1783==    by 0x401367: get_match_counts (eval-c4.c:70)
==1783==    by 0x401E70: evaluate_hand (eval.c:280)
==1783==    by 0x4026AD: describe_hand (test-eval.c:68)
==1783==    by 0x4028D8: main (test-eval.c:116)
==1783== 
==1783== 
==1783== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1783==  Access not within mapped region at address 0x0
==1783==    at 0x400C02: print_hand (deck.c:8)
==1783==    by 0x4026F8: describe_hand (test-eval.c:74)
==1783==    by 0x4028D8: main (test-eval.c:116)
==1783==  If you believe this happened as a result of a stack
==1783==  overflow in your program's main thread (unlikely but
==1783==  possible), you can try to increase the size of the
==1783==  main thread stack using the --main-stacksize= flag.
==1783==  The main thread stack size used in this run was 8388608.
==1783== 
==1783== HEAP SUMMARY:
==1783==     in use at exit: 896 bytes in 18 blocks
==1783==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1783== 
==1783== LEAK SUMMARY:
==1783==    definitely lost: 0 bytes in 0 blocks
==1783==    indirectly lost: 0 bytes in 0 blocks
==1783==      possibly lost: 0 bytes in 0 blocks
==1783==    still reachable: 896 bytes in 18 blocks
==1783==         suppressed: 0 bytes in 0 blocks
==1783== Rerun with --leak-check=full to see details of leaked memory
==1783== 
==1783== For counts of detected and suppressed errors, rerun with: -v
==1783== Use --track-origins=yes to see where uninitialised values come from
==1783== ERROR SUMMARY: 4 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==1788== Memcheck, a memory error detector
==1788== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1788== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1788== Command: ./test-eval inp.5.txt
==1788== Parent PID: 1787
==1788== 
==1788== Use of uninitialised value of size 8
==1788==    at 0x400C02: print_hand (deck.c:8)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788== 
==1788== Conditional jump or move depends on uninitialised value(s)
==1788==    at 0x402B71: suit_letter (cards.c:50)
==1788==    by 0x402BBF: print_card (cards.c:61)
==1788==    by 0x400C14: print_hand (deck.c:9)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788== 
==1788== Conditional jump or move depends on uninitialised value(s)
==1788==    at 0x402B76: suit_letter (cards.c:50)
==1788==    by 0x402BBF: print_card (cards.c:61)
==1788==    by 0x400C14: print_hand (deck.c:9)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788== 
==1788== Conditional jump or move depends on uninitialised value(s)
==1788==    at 0x402AF3: value_letter (cards.c:28)
==1788==    by 0x402BCE: print_card (cards.c:61)
==1788==    by 0x400C14: print_hand (deck.c:9)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788== 
==1788== Invalid read of size 8
==1788==    at 0x400C02: print_hand (deck.c:8)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1788== 
==1788== 
==1788== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1788==  Access not within mapped region at address 0x400001102
==1788==    at 0x400C02: print_hand (deck.c:8)
==1788==    by 0x4026F8: describe_hand (test-eval.c:74)
==1788==    by 0x4028D8: main (test-eval.c:116)
==1788==  If you believe this happened as a result of a stack
==1788==  overflow in your program's main thread (unlikely but
==1788==  possible), you can try to increase the size of the
==1788==  main thread stack using the --main-stacksize= flag.
==1788==  The main thread stack size used in this run was 8388608.
==1788== 
==1788== HEAP SUMMARY:
==1788==     in use at exit: 864 bytes in 16 blocks
==1788==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==1788== 
==1788== LEAK SUMMARY:
==1788==    definitely lost: 0 bytes in 0 blocks
==1788==    indirectly lost: 0 bytes in 0 blocks
==1788==      possibly lost: 0 bytes in 0 blocks
==1788==    still reachable: 864 bytes in 16 blocks
==1788==         suppressed: 0 bytes in 0 blocks
==1788== Rerun with --leak-check=full to see details of leaked memory
==1788== 
==1788== For counts of detected and suppressed errors, rerun with: -v
==1788== Use --track-origins=yes to see where uninitialised values come from
==1788== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==1793== Memcheck, a memory error detector
==1793== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1793== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1793== Command: ./test-eval inp.6.txt
==1793== Parent PID: 1792
==1793== 
==1793== Use of uninitialised value of size 8
==1793==    at 0x400C02: print_hand (deck.c:8)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793== 
==1793== Conditional jump or move depends on uninitialised value(s)
==1793==    at 0x402B71: suit_letter (cards.c:50)
==1793==    by 0x402BBF: print_card (cards.c:61)
==1793==    by 0x400C14: print_hand (deck.c:9)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793== 
==1793== Conditional jump or move depends on uninitialised value(s)
==1793==    at 0x402B76: suit_letter (cards.c:50)
==1793==    by 0x402BBF: print_card (cards.c:61)
==1793==    by 0x400C14: print_hand (deck.c:9)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793== 
==1793== Conditional jump or move depends on uninitialised value(s)
==1793==    at 0x402AF3: value_letter (cards.c:28)
==1793==    by 0x402BCE: print_card (cards.c:61)
==1793==    by 0x400C14: print_hand (deck.c:9)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793== 
==1793== Invalid read of size 8
==1793==    at 0x400C02: print_hand (deck.c:8)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1793== 
==1793== 
==1793== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1793==  Access not within mapped region at address 0x400001102
==1793==    at 0x400C02: print_hand (deck.c:8)
==1793==    by 0x4026F8: describe_hand (test-eval.c:74)
==1793==    by 0x4028D8: main (test-eval.c:116)
==1793==  If you believe this happened as a result of a stack
==1793==  overflow in your program's main thread (unlikely but
==1793==  possible), you can try to increase the size of the
==1793==  main thread stack using the --main-stacksize= flag.
==1793==  The main thread stack size used in this run was 8388608.
==1793== 
==1793== HEAP SUMMARY:
==1793==     in use at exit: 896 bytes in 18 blocks
==1793==   total heap usage: 90 allocs, 72 frees, 10,448 bytes allocated
==1793== 
==1793== LEAK SUMMARY:
==1793==    definitely lost: 0 bytes in 0 blocks
==1793==    indirectly lost: 0 bytes in 0 blocks
==1793==      possibly lost: 0 bytes in 0 blocks
==1793==    still reachable: 896 bytes in 18 blocks
==1793==         suppressed: 0 bytes in 0 blocks
==1793== Rerun with --leak-check=full to see details of leaked memory
==1793== 
==1793== For counts of detected and suppressed errors, rerun with: -v
==1793== Use --track-origins=yes to see where uninitialised values come from
==1793== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1798== Memcheck, a memory error detector
==1798== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1798== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1798== Command: ./test-eval inp.7.txt
==1798== Parent PID: 1797
==1798== 
==1798== Invalid read of size 8
==1798==    at 0x401472: card_ptr_comp (eval.c:11)
==1798==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1798==    by 0x4E7369E: qsort_r (msort.c:297)
==1798==    by 0x4019C4: compare_hands (eval.c:169)
==1798==    by 0x40294D: main (test-eval.c:124)
==1798==  Address 0x520e940 is 0 bytes after a block of size 48 alloc'd
==1798==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1798==    by 0x400FDD: add_card_to (deck-c4.c:29)
==1798==    by 0x4030B7: hand_from_string (input.c:49)
==1798==    by 0x402936: main (test-eval.c:123)
==1798== 
==1798== Invalid read of size 4
==1798==    at 0x401475: card_ptr_comp (eval.c:11)
==1798==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1798==    by 0x4E7369E: qsort_r (msort.c:297)
==1798==    by 0x4019C4: compare_hands (eval.c:169)
==1798==    by 0x40294D: main (test-eval.c:124)
==1798==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1798== 
==1798== 
==1798== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1798==  Access not within mapped region at address 0x0
==1798==    at 0x401475: card_ptr_comp (eval.c:11)
==1798==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1798==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1798==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1798==    by 0x4E7369E: qsort_r (msort.c:297)
==1798==    by 0x4019C4: compare_hands (eval.c:169)
==1798==    by 0x40294D: main (test-eval.c:124)
==1798==  If you believe this happened as a result of a stack
==1798==  overflow in your program's main thread (unlikely but
==1798==  possible), you can try to increase the size of the
==1798==  main thread stack using the --main-stacksize= flag.
==1798==  The main thread stack size used in this run was 8388608.
==1798== 
==1798== HEAP SUMMARY:
==1798==     in use at exit: 912 bytes in 19 blocks
==1798==   total heap usage: 386 allocs, 367 frees, 16,504 bytes allocated
==1798== 
==1798== LEAK SUMMARY:
==1798==    definitely lost: 0 bytes in 0 blocks
==1798==    indirectly lost: 0 bytes in 0 blocks
==1798==      possibly lost: 0 bytes in 0 blocks
==1798==    still reachable: 912 bytes in 19 blocks
==1798==         suppressed: 0 bytes in 0 blocks
==1798== Rerun with --leak-check=full to see details of leaked memory
==1798== 
==1798== For counts of detected and suppressed errors, rerun with: -v
==1798== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1803== Memcheck, a memory error detector
==1803== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1803== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1803== Command: ./test-eval inp.8.txt
==1803== Parent PID: 1802
==1803== 
==1803== Use of uninitialised value of size 8
==1803==    at 0x400C02: print_hand (deck.c:8)
==1803==    by 0x4026F8: describe_hand (test-eval.c:74)
==1803==    by 0x4028D8: main (test-eval.c:116)
==1803== 
==1803== Invalid read of size 8
==1803==    at 0x400C02: print_hand (deck.c:8)
==1803==    by 0x4026F8: describe_hand (test-eval.c:74)
==1803==    by 0x4028D8: main (test-eval.c:116)
==1803==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1803== 
==1803== 
==1803== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1803==  Access not within mapped region at address 0x0
==1803==    at 0x400C02: print_hand (deck.c:8)
==1803==    by 0x4026F8: describe_hand (test-eval.c:74)
==1803==    by 0x4028D8: main (test-eval.c:116)
==1803==  If you believe this happened as a result of a stack
==1803==  overflow in your program's main thread (unlikely but
==1803==  possible), you can try to increase the size of the
==1803==  main thread stack using the --main-stacksize= flag.
==1803==  The main thread stack size used in this run was 8388608.
==1803== 
==1803== HEAP SUMMARY:
==1803==     in use at exit: 896 bytes in 18 blocks
==1803==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==1803== 
==1803== LEAK SUMMARY:
==1803==    definitely lost: 0 bytes in 0 blocks
==1803==    indirectly lost: 0 bytes in 0 blocks
==1803==      possibly lost: 0 bytes in 0 blocks
==1803==    still reachable: 896 bytes in 18 blocks
==1803==         suppressed: 0 bytes in 0 blocks
==1803== Rerun with --leak-check=full to see details of leaked memory
==1803== 
==1803== For counts of detected and suppressed errors, rerun with: -v
==1803== Use --track-origins=yes to see where uninitialised values come from
==1803== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1808== Memcheck, a memory error detector
==1808== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1808== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1808== Command: ./test-eval inp.9.txt
==1808== Parent PID: 1807
==1808== 
==1808== Use of uninitialised value of size 8
==1808==    at 0x400C02: print_hand (deck.c:8)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808== 
==1808== Conditional jump or move depends on uninitialised value(s)
==1808==    at 0x402B71: suit_letter (cards.c:50)
==1808==    by 0x402BBF: print_card (cards.c:61)
==1808==    by 0x400C14: print_hand (deck.c:9)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808== 
==1808== Conditional jump or move depends on uninitialised value(s)
==1808==    at 0x402B76: suit_letter (cards.c:50)
==1808==    by 0x402BBF: print_card (cards.c:61)
==1808==    by 0x400C14: print_hand (deck.c:9)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808== 
==1808== Conditional jump or move depends on uninitialised value(s)
==1808==    at 0x402AF3: value_letter (cards.c:28)
==1808==    by 0x402BCE: print_card (cards.c:61)
==1808==    by 0x400C14: print_hand (deck.c:9)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808== 
==1808== Invalid read of size 8
==1808==    at 0x400C02: print_hand (deck.c:8)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==1808== 
==1808== 
==1808== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1808==  Access not within mapped region at address 0x400001102
==1808==    at 0x400C02: print_hand (deck.c:8)
==1808==    by 0x4026F8: describe_hand (test-eval.c:74)
==1808==    by 0x4028D8: main (test-eval.c:116)
==1808==  If you believe this happened as a result of a stack
==1808==  overflow in your program's main thread (unlikely but
==1808==  possible), you can try to increase the size of the
==1808==  main thread stack using the --main-stacksize= flag.
==1808==  The main thread stack size used in this run was 8388608.
==1808== 
==1808== HEAP SUMMARY:
==1808==     in use at exit: 928 bytes in 20 blocks
==1808==   total heap usage: 86 allocs, 66 frees, 10,336 bytes allocated
==1808== 
==1808== LEAK SUMMARY:
==1808==    definitely lost: 0 bytes in 0 blocks
==1808==    indirectly lost: 0 bytes in 0 blocks
==1808==      possibly lost: 0 bytes in 0 blocks
==1808==    still reachable: 928 bytes in 20 blocks
==1808==         suppressed: 0 bytes in 0 blocks
==1808== Rerun with --leak-check=full to see details of leaked memory
==1808== 
==1808== For counts of detected and suppressed errors, rerun with: -v
==1808== Use --track-origins=yes to see where uninitialised values come from
==1808== ERROR SUMMARY: 6 errors from 5 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1813== Memcheck, a memory error detector
==1813== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1813== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1813== Command: ./test-eval inp.10.txt
==1813== Parent PID: 1812
==1813== 
==1813== Use of uninitialised value of size 8
==1813==    at 0x400C02: print_hand (deck.c:8)
==1813==    by 0x4026F8: describe_hand (test-eval.c:74)
==1813==    by 0x4028F8: main (test-eval.c:119)
==1813== 
==1813== Invalid read of size 8
==1813==    at 0x400C02: print_hand (deck.c:8)
==1813==    by 0x4026F8: describe_hand (test-eval.c:74)
==1813==    by 0x4028F8: main (test-eval.c:119)
==1813==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1813== 
==1813== 
==1813== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1813==  Access not within mapped region at address 0x0
==1813==    at 0x400C02: print_hand (deck.c:8)
==1813==    by 0x4026F8: describe_hand (test-eval.c:74)
==1813==    by 0x4028F8: main (test-eval.c:119)
==1813==  If you believe this happened as a result of a stack
==1813==  overflow in your program's main thread (unlikely but
==1813==  possible), you can try to increase the size of the
==1813==  main thread stack using the --main-stacksize= flag.
==1813==  The main thread stack size used in this run was 8388608.
==1813== 
==1813== HEAP SUMMARY:
==1813==     in use at exit: 896 bytes in 18 blocks
==1813==   total heap usage: 34 allocs, 16 frees, 9,424 bytes allocated
==1813== 
==1813== LEAK SUMMARY:
==1813==    definitely lost: 0 bytes in 0 blocks
==1813==    indirectly lost: 0 bytes in 0 blocks
==1813==      possibly lost: 0 bytes in 0 blocks
==1813==    still reachable: 896 bytes in 18 blocks
==1813==         suppressed: 0 bytes in 0 blocks
==1813== Rerun with --leak-check=full to see details of leaked memory
==1813== 
==1813== For counts of detected and suppressed errors, rerun with: -v
==1813== Use --track-origins=yes to see where uninitialised values come from
==1813== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
