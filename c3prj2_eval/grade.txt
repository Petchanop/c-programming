Grading at Sat Jan 23 20:18:58 UTC 2021
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==974== Memcheck, a memory error detector
==974== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==974== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==974== Command: ./test-eval inp.1.txt
==974== Parent PID: 973
==974== 
==974== Invalid read of size 8
==974==    at 0x40142B: card_ptr_comp (eval.c:9)
==974==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==974==    by 0x4E7369E: qsort_r (msort.c:297)
==974==    by 0x401918: compare_hands (eval.c:167)
==974==    by 0x402851: main (test-eval.c:124)
==974==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==974==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==974==    by 0x400FDA: add_card_to (deck-c4.c:29)
==974==    by 0x402FBB: hand_from_string (input.c:49)
==974==    by 0x402825: main (test-eval.c:122)
==974== 
==974== Invalid read of size 4
==974==    at 0x40142E: card_ptr_comp (eval.c:9)
==974==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==974==    by 0x4E7369E: qsort_r (msort.c:297)
==974==    by 0x401918: compare_hands (eval.c:167)
==974==    by 0x402851: main (test-eval.c:124)
==974==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==974== 
==974== 
==974== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==974==  Access not within mapped region at address 0x0
==974==    at 0x40142E: card_ptr_comp (eval.c:9)
==974==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==974==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==974==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==974==    by 0x4E7369E: qsort_r (msort.c:297)
==974==    by 0x401918: compare_hands (eval.c:167)
==974==    by 0x402851: main (test-eval.c:124)
==974==  If you believe this happened as a result of a stack
==974==  overflow in your program's main thread (unlikely but
==974==  possible), you can try to increase the size of the
==974==  main thread stack using the --main-stacksize= flag.
==974==  The main thread stack size used in this run was 8388608.
==974== 
==974== HEAP SUMMARY:
==974==     in use at exit: 896 bytes in 18 blocks
==974==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==974== 
==974== LEAK SUMMARY:
==974==    definitely lost: 0 bytes in 0 blocks
==974==    indirectly lost: 0 bytes in 0 blocks
==974==      possibly lost: 0 bytes in 0 blocks
==974==    still reachable: 896 bytes in 18 blocks
==974==         suppressed: 0 bytes in 0 blocks
==974== Rerun with --leak-check=full to see details of leaked memory
==974== 
==974== For counts of detected and suppressed errors, rerun with: -v
==974== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==979== Memcheck, a memory error detector
==979== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==979== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==979== Command: ./test-eval inp.2.txt
==979== Parent PID: 978
==979== 
==979== Invalid read of size 8
==979==    at 0x401869: build_hand_from_match (eval.c:156)
==979==    by 0x4021A7: evaluate_hand (eval.c:321)
==979==    by 0x4025B1: describe_hand (test-eval.c:68)
==979==    by 0x4027FC: main (test-eval.c:119)
==979==  Address 0x5205b38 is 0 bytes after a block of size 40 alloc'd
==979==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==979==    by 0x400FDA: add_card_to (deck-c4.c:29)
==979==    by 0x402FBB: hand_from_string (input.c:49)
==979==    by 0x402776: main (test-eval.c:111)
==979== 
==979== Invalid read of size 8
==979==    at 0x400C0A: print_hand (deck.c:10)
==979==    by 0x4025FC: describe_hand (test-eval.c:74)
==979==    by 0x4027FC: main (test-eval.c:119)
==979==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==979== 
==979== 
==979== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==979==  Access not within mapped region at address 0x0
==979==    at 0x400C0A: print_hand (deck.c:10)
==979==    by 0x4025FC: describe_hand (test-eval.c:74)
==979==    by 0x4027FC: main (test-eval.c:119)
==979==  If you believe this happened as a result of a stack
==979==  overflow in your program's main thread (unlikely but
==979==  possible), you can try to increase the size of the
==979==  main thread stack using the --main-stacksize= flag.
==979==  The main thread stack size used in this run was 8388608.
==979== 
==979== HEAP SUMMARY:
==979==     in use at exit: 880 bytes in 17 blocks
==979==   total heap usage: 32 allocs, 15 frees, 9,360 bytes allocated
==979== 
==979== LEAK SUMMARY:
==979==    definitely lost: 0 bytes in 0 blocks
==979==    indirectly lost: 0 bytes in 0 blocks
==979==      possibly lost: 0 bytes in 0 blocks
==979==    still reachable: 880 bytes in 17 blocks
==979==         suppressed: 0 bytes in 0 blocks
==979== Rerun with --leak-check=full to see details of leaked memory
==979== 
==979== For counts of detected and suppressed errors, rerun with: -v
==979== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==984== Memcheck, a memory error detector
==984== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==984== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==984== Command: ./test-eval inp.3.txt
==984== Parent PID: 983
==984== 
==984== Invalid read of size 8
==984==    at 0x401869: build_hand_from_match (eval.c:156)
==984==    by 0x402095: evaluate_hand (eval.c:305)
==984==    by 0x4025B1: describe_hand (test-eval.c:68)
==984==    by 0x4027DC: main (test-eval.c:116)
==984==  Address 0x52056c8 is 0 bytes after a block of size 40 alloc'd
==984==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==984==    by 0x400FDA: add_card_to (deck-c4.c:29)
==984==    by 0x402FBB: hand_from_string (input.c:49)
==984==    by 0x402761: main (test-eval.c:110)
==984== 
==984== Invalid read of size 8
==984==    at 0x401869: build_hand_from_match (eval.c:156)
==984==    by 0x402095: evaluate_hand (eval.c:305)
==984==    by 0x4025B1: describe_hand (test-eval.c:68)
==984==    by 0x4027FC: main (test-eval.c:119)
==984==  Address 0x5205a78 is 0 bytes after a block of size 40 alloc'd
==984==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==984==    by 0x400FDA: add_card_to (deck-c4.c:29)
==984==    by 0x402FBB: hand_from_string (input.c:49)
==984==    by 0x402776: main (test-eval.c:111)
==984== 
==984== Invalid read of size 8
==984==    at 0x401422: card_ptr_comp (eval.c:9)
==984==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==984==    by 0x4E7369E: qsort_r (msort.c:297)
==984==    by 0x401918: compare_hands (eval.c:167)
==984==    by 0x402851: main (test-eval.c:124)
==984==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==984==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==984==    by 0x400FDA: add_card_to (deck-c4.c:29)
==984==    by 0x402FBB: hand_from_string (input.c:49)
==984==    by 0x402825: main (test-eval.c:122)
==984== 
==984== Invalid read of size 4
==984==    at 0x401425: card_ptr_comp (eval.c:9)
==984==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==984==    by 0x4E7369E: qsort_r (msort.c:297)
==984==    by 0x401918: compare_hands (eval.c:167)
==984==    by 0x402851: main (test-eval.c:124)
==984==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==984== 
==984== 
==984== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==984==  Access not within mapped region at address 0x0
==984==    at 0x401425: card_ptr_comp (eval.c:9)
==984==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==984==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==984==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==984==    by 0x4E7369E: qsort_r (msort.c:297)
==984==    by 0x401918: compare_hands (eval.c:167)
==984==    by 0x402851: main (test-eval.c:124)
==984==  If you believe this happened as a result of a stack
==984==  overflow in your program's main thread (unlikely but
==984==  possible), you can try to increase the size of the
==984==  main thread stack using the --main-stacksize= flag.
==984==  The main thread stack size used in this run was 8388608.
==984== 
==984== HEAP SUMMARY:
==984==     in use at exit: 864 bytes in 16 blocks
==984==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==984== 
==984== LEAK SUMMARY:
==984==    definitely lost: 0 bytes in 0 blocks
==984==    indirectly lost: 0 bytes in 0 blocks
==984==      possibly lost: 0 bytes in 0 blocks
==984==    still reachable: 864 bytes in 16 blocks
==984==         suppressed: 0 bytes in 0 blocks
==984== Rerun with --leak-check=full to see details of leaked memory
==984== 
==984== For counts of detected and suppressed errors, rerun with: -v
==984== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==989== Memcheck, a memory error detector
==989== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==989== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==989== Command: ./test-eval inp.4.txt
==989== Parent PID: 988
==989== 
==989== Invalid read of size 8
==989==    at 0x40142B: card_ptr_comp (eval.c:9)
==989==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==989==    by 0x4E7369E: qsort_r (msort.c:297)
==989==    by 0x401918: compare_hands (eval.c:167)
==989==    by 0x402851: main (test-eval.c:124)
==989==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==989==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==989==    by 0x400FDA: add_card_to (deck-c4.c:29)
==989==    by 0x402FBB: hand_from_string (input.c:49)
==989==    by 0x402825: main (test-eval.c:122)
==989== 
==989== Invalid read of size 4
==989==    at 0x40142E: card_ptr_comp (eval.c:9)
==989==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==989==    by 0x4E7369E: qsort_r (msort.c:297)
==989==    by 0x401918: compare_hands (eval.c:167)
==989==    by 0x402851: main (test-eval.c:124)
==989==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==989== 
==989== 
==989== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==989==  Access not within mapped region at address 0x0
==989==    at 0x40142E: card_ptr_comp (eval.c:9)
==989==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==989==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==989==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==989==    by 0x4E7369E: qsort_r (msort.c:297)
==989==    by 0x401918: compare_hands (eval.c:167)
==989==    by 0x402851: main (test-eval.c:124)
==989==  If you believe this happened as a result of a stack
==989==  overflow in your program's main thread (unlikely but
==989==  possible), you can try to increase the size of the
==989==  main thread stack using the --main-stacksize= flag.
==989==  The main thread stack size used in this run was 8388608.
==989== 
==989== HEAP SUMMARY:
==989==     in use at exit: 896 bytes in 18 blocks
==989==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==989== 
==989== LEAK SUMMARY:
==989==    definitely lost: 0 bytes in 0 blocks
==989==    indirectly lost: 0 bytes in 0 blocks
==989==      possibly lost: 0 bytes in 0 blocks
==989==    still reachable: 896 bytes in 18 blocks
==989==         suppressed: 0 bytes in 0 blocks
==989== Rerun with --leak-check=full to see details of leaked memory
==989== 
==989== For counts of detected and suppressed errors, rerun with: -v
==989== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==994== Memcheck, a memory error detector
==994== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==994== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==994== Command: ./test-eval inp.5.txt
==994== Parent PID: 993
==994== 
==994== Invalid read of size 8
==994==    at 0x401422: card_ptr_comp (eval.c:9)
==994==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==994==    by 0x4E7369E: qsort_r (msort.c:297)
==994==    by 0x401918: compare_hands (eval.c:167)
==994==    by 0x402851: main (test-eval.c:124)
==994==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==994==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==994==    by 0x400FDA: add_card_to (deck-c4.c:29)
==994==    by 0x402FBB: hand_from_string (input.c:49)
==994==    by 0x402825: main (test-eval.c:122)
==994== 
==994== Invalid read of size 4
==994==    at 0x401425: card_ptr_comp (eval.c:9)
==994==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==994==    by 0x4E7369E: qsort_r (msort.c:297)
==994==    by 0x401918: compare_hands (eval.c:167)
==994==    by 0x402851: main (test-eval.c:124)
==994==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==994== 
==994== 
==994== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==994==  Access not within mapped region at address 0x0
==994==    at 0x401425: card_ptr_comp (eval.c:9)
==994==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==994==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==994==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==994==    by 0x4E7369E: qsort_r (msort.c:297)
==994==    by 0x401918: compare_hands (eval.c:167)
==994==    by 0x402851: main (test-eval.c:124)
==994==  If you believe this happened as a result of a stack
==994==  overflow in your program's main thread (unlikely but
==994==  possible), you can try to increase the size of the
==994==  main thread stack using the --main-stacksize= flag.
==994==  The main thread stack size used in this run was 8388608.
==994== 
==994== HEAP SUMMARY:
==994==     in use at exit: 864 bytes in 16 blocks
==994==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==994== 
==994== LEAK SUMMARY:
==994==    definitely lost: 0 bytes in 0 blocks
==994==    indirectly lost: 0 bytes in 0 blocks
==994==      possibly lost: 0 bytes in 0 blocks
==994==    still reachable: 864 bytes in 16 blocks
==994==         suppressed: 0 bytes in 0 blocks
==994== Rerun with --leak-check=full to see details of leaked memory
==994== 
==994== For counts of detected and suppressed errors, rerun with: -v
==994== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==999== Memcheck, a memory error detector
==999== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==999== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==999== Command: ./test-eval inp.6.txt
==999== Parent PID: 998
==999== 
==999== Invalid read of size 8
==999==    at 0x40142B: card_ptr_comp (eval.c:9)
==999==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==999==    by 0x4E7369E: qsort_r (msort.c:297)
==999==    by 0x401918: compare_hands (eval.c:167)
==999==    by 0x402851: main (test-eval.c:124)
==999==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==999==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==999==    by 0x400FDA: add_card_to (deck-c4.c:29)
==999==    by 0x402FBB: hand_from_string (input.c:49)
==999==    by 0x402825: main (test-eval.c:122)
==999== 
==999== Invalid read of size 4
==999==    at 0x40142E: card_ptr_comp (eval.c:9)
==999==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==999==    by 0x4E7369E: qsort_r (msort.c:297)
==999==    by 0x401918: compare_hands (eval.c:167)
==999==    by 0x402851: main (test-eval.c:124)
==999==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==999== 
==999== 
==999== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==999==  Access not within mapped region at address 0x0
==999==    at 0x40142E: card_ptr_comp (eval.c:9)
==999==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==999==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==999==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==999==    by 0x4E7369E: qsort_r (msort.c:297)
==999==    by 0x401918: compare_hands (eval.c:167)
==999==    by 0x402851: main (test-eval.c:124)
==999==  If you believe this happened as a result of a stack
==999==  overflow in your program's main thread (unlikely but
==999==  possible), you can try to increase the size of the
==999==  main thread stack using the --main-stacksize= flag.
==999==  The main thread stack size used in this run was 8388608.
==999== 
==999== HEAP SUMMARY:
==999==     in use at exit: 896 bytes in 18 blocks
==999==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==999== 
==999== LEAK SUMMARY:
==999==    definitely lost: 0 bytes in 0 blocks
==999==    indirectly lost: 0 bytes in 0 blocks
==999==      possibly lost: 0 bytes in 0 blocks
==999==    still reachable: 896 bytes in 18 blocks
==999==         suppressed: 0 bytes in 0 blocks
==999== Rerun with --leak-check=full to see details of leaked memory
==999== 
==999== For counts of detected and suppressed errors, rerun with: -v
==999== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1004== Memcheck, a memory error detector
==1004== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1004== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1004== Command: ./test-eval inp.7.txt
==1004== Parent PID: 1003
==1004== 
==1004== Invalid read of size 8
==1004==    at 0x40142B: card_ptr_comp (eval.c:9)
==1004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1004==    by 0x4E7369E: qsort_r (msort.c:297)
==1004==    by 0x401918: compare_hands (eval.c:167)
==1004==    by 0x402851: main (test-eval.c:124)
==1004==  Address 0x520cf30 is 0 bytes after a block of size 48 alloc'd
==1004==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1004==    by 0x400FDA: add_card_to (deck-c4.c:29)
==1004==    by 0x402FBB: hand_from_string (input.c:49)
==1004==    by 0x402825: main (test-eval.c:122)
==1004== 
==1004== Invalid read of size 4
==1004==    at 0x40142E: card_ptr_comp (eval.c:9)
==1004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1004==    by 0x4E7369E: qsort_r (msort.c:297)
==1004==    by 0x401918: compare_hands (eval.c:167)
==1004==    by 0x402851: main (test-eval.c:124)
==1004==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1004== 
==1004== 
==1004== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1004==  Access not within mapped region at address 0x0
==1004==    at 0x40142E: card_ptr_comp (eval.c:9)
==1004==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1004==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1004==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1004==    by 0x4E7369E: qsort_r (msort.c:297)
==1004==    by 0x401918: compare_hands (eval.c:167)
==1004==    by 0x402851: main (test-eval.c:124)
==1004==  If you believe this happened as a result of a stack
==1004==  overflow in your program's main thread (unlikely but
==1004==  possible), you can try to increase the size of the
==1004==  main thread stack using the --main-stacksize= flag.
==1004==  The main thread stack size used in this run was 8388608.
==1004== 
==1004== HEAP SUMMARY:
==1004==     in use at exit: 896 bytes in 18 blocks
==1004==   total heap usage: 324 allocs, 306 frees, 15,296 bytes allocated
==1004== 
==1004== LEAK SUMMARY:
==1004==    definitely lost: 0 bytes in 0 blocks
==1004==    indirectly lost: 0 bytes in 0 blocks
==1004==      possibly lost: 0 bytes in 0 blocks
==1004==    still reachable: 896 bytes in 18 blocks
==1004==         suppressed: 0 bytes in 0 blocks
==1004== Rerun with --leak-check=full to see details of leaked memory
==1004== 
==1004== For counts of detected and suppressed errors, rerun with: -v
==1004== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1009== Memcheck, a memory error detector
==1009== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1009== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1009== Command: ./test-eval inp.8.txt
==1009== Parent PID: 1008
==1009== 
==1009== Invalid read of size 8
==1009==    at 0x40142B: card_ptr_comp (eval.c:9)
==1009==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1009==    by 0x4E7369E: qsort_r (msort.c:297)
==1009==    by 0x401918: compare_hands (eval.c:167)
==1009==    by 0x402851: main (test-eval.c:124)
==1009==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==1009==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1009==    by 0x400FDA: add_card_to (deck-c4.c:29)
==1009==    by 0x402FBB: hand_from_string (input.c:49)
==1009==    by 0x402825: main (test-eval.c:122)
==1009== 
==1009== Invalid read of size 4
==1009==    at 0x40142E: card_ptr_comp (eval.c:9)
==1009==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1009==    by 0x4E7369E: qsort_r (msort.c:297)
==1009==    by 0x401918: compare_hands (eval.c:167)
==1009==    by 0x402851: main (test-eval.c:124)
==1009==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1009== 
==1009== 
==1009== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1009==  Access not within mapped region at address 0x0
==1009==    at 0x40142E: card_ptr_comp (eval.c:9)
==1009==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1009==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1009==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1009==    by 0x4E7369E: qsort_r (msort.c:297)
==1009==    by 0x401918: compare_hands (eval.c:167)
==1009==    by 0x402851: main (test-eval.c:124)
==1009==  If you believe this happened as a result of a stack
==1009==  overflow in your program's main thread (unlikely but
==1009==  possible), you can try to increase the size of the
==1009==  main thread stack using the --main-stacksize= flag.
==1009==  The main thread stack size used in this run was 8388608.
==1009== 
==1009== HEAP SUMMARY:
==1009==     in use at exit: 896 bytes in 18 blocks
==1009==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==1009== 
==1009== LEAK SUMMARY:
==1009==    definitely lost: 0 bytes in 0 blocks
==1009==    indirectly lost: 0 bytes in 0 blocks
==1009==      possibly lost: 0 bytes in 0 blocks
==1009==    still reachable: 896 bytes in 18 blocks
==1009==         suppressed: 0 bytes in 0 blocks
==1009== Rerun with --leak-check=full to see details of leaked memory
==1009== 
==1009== For counts of detected and suppressed errors, rerun with: -v
==1009== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
Valgrind returned an error status
==1014== Memcheck, a memory error detector
==1014== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1014== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1014== Command: ./test-eval inp.9.txt
==1014== Parent PID: 1013
==1014== 
==1014== Invalid read of size 8
==1014==    at 0x401422: card_ptr_comp (eval.c:9)
==1014==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1014==    by 0x4E7369E: qsort_r (msort.c:297)
==1014==    by 0x401918: compare_hands (eval.c:167)
==1014==    by 0x402851: main (test-eval.c:124)
==1014==  Address 0x5206fe8 is 0 bytes after a block of size 40 alloc'd
==1014==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1014==    by 0x400FDA: add_card_to (deck-c4.c:29)
==1014==    by 0x402FBB: hand_from_string (input.c:49)
==1014==    by 0x402825: main (test-eval.c:122)
==1014== 
==1014== Invalid read of size 4
==1014==    at 0x401425: card_ptr_comp (eval.c:9)
==1014==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1014==    by 0x4E7369E: qsort_r (msort.c:297)
==1014==    by 0x401918: compare_hands (eval.c:167)
==1014==    by 0x402851: main (test-eval.c:124)
==1014==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1014== 
==1014== 
==1014== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1014==  Access not within mapped region at address 0x0
==1014==    at 0x401425: card_ptr_comp (eval.c:9)
==1014==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1014==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1014==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1014==    by 0x4E7369E: qsort_r (msort.c:297)
==1014==    by 0x401918: compare_hands (eval.c:167)
==1014==    by 0x402851: main (test-eval.c:124)
==1014==  If you believe this happened as a result of a stack
==1014==  overflow in your program's main thread (unlikely but
==1014==  possible), you can try to increase the size of the
==1014==  main thread stack using the --main-stacksize= flag.
==1014==  The main thread stack size used in this run was 8388608.
==1014== 
==1014== HEAP SUMMARY:
==1014==     in use at exit: 864 bytes in 16 blocks
==1014==   total heap usage: 52 allocs, 36 frees, 9,648 bytes allocated
==1014== 
==1014== LEAK SUMMARY:
==1014==    definitely lost: 0 bytes in 0 blocks
==1014==    indirectly lost: 0 bytes in 0 blocks
==1014==      possibly lost: 0 bytes in 0 blocks
==1014==    still reachable: 864 bytes in 16 blocks
==1014==         suppressed: 0 bytes in 0 blocks
==1014== Rerun with --leak-check=full to see details of leaked memory
==1014== 
==1014== For counts of detected and suppressed errors, rerun with: -v
==1014== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1019== Memcheck, a memory error detector
==1019== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1019== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1019== Command: ./test-eval inp.10.txt
==1019== Parent PID: 1018
==1019== 
==1019== Invalid read of size 8
==1019==    at 0x40142B: card_ptr_comp (eval.c:9)
==1019==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1019==    by 0x4E7369E: qsort_r (msort.c:297)
==1019==    by 0x401918: compare_hands (eval.c:167)
==1019==    by 0x402851: main (test-eval.c:124)
==1019==  Address 0x5207230 is 0 bytes after a block of size 48 alloc'd
==1019==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1019==    by 0x400FDA: add_card_to (deck-c4.c:29)
==1019==    by 0x402FBB: hand_from_string (input.c:49)
==1019==    by 0x402825: main (test-eval.c:122)
==1019== 
==1019== Invalid read of size 4
==1019==    at 0x40142E: card_ptr_comp (eval.c:9)
==1019==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1019==    by 0x4E7369E: qsort_r (msort.c:297)
==1019==    by 0x401918: compare_hands (eval.c:167)
==1019==    by 0x402851: main (test-eval.c:124)
==1019==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1019== 
==1019== 
==1019== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1019==  Access not within mapped region at address 0x0
==1019==    at 0x40142E: card_ptr_comp (eval.c:9)
==1019==    by 0x4E73231: msort_with_tmp.part.0 (msort.c:83)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E72EDC: msort_with_tmp (msort.c:45)
==1019==    by 0x4E72EDC: msort_with_tmp.part.0 (msort.c:54)
==1019==    by 0x4E7369E: msort_with_tmp (msort.c:45)
==1019==    by 0x4E7369E: qsort_r (msort.c:297)
==1019==    by 0x401918: compare_hands (eval.c:167)
==1019==    by 0x402851: main (test-eval.c:124)
==1019==  If you believe this happened as a result of a stack
==1019==  overflow in your program's main thread (unlikely but
==1019==  possible), you can try to increase the size of the
==1019==  main thread stack using the --main-stacksize= flag.
==1019==  The main thread stack size used in this run was 8388608.
==1019== 
==1019== HEAP SUMMARY:
==1019==     in use at exit: 896 bytes in 18 blocks
==1019==   total heap usage: 60 allocs, 42 frees, 9,888 bytes allocated
==1019== 
==1019== LEAK SUMMARY:
==1019==    definitely lost: 0 bytes in 0 blocks
==1019==    indirectly lost: 0 bytes in 0 blocks
==1019==      possibly lost: 0 bytes in 0 blocks
==1019==    still reachable: 896 bytes in 18 blocks
==1019==         suppressed: 0 bytes in 0 blocks
==1019== Rerun with --leak-check=full to see details of leaked memory
==1019== 
==1019== For counts of detected and suppressed errors, rerun with: -v
==1019== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
